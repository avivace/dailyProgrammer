{
  "_args": [
    [
      {
        "raw": "grunt-contrib-concat",
        "scope": null,
        "escapedName": "grunt-contrib-concat",
        "name": "grunt-contrib-concat",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/var/www/html/dp_alpha"
    ]
  ],
  "_from": "grunt-contrib-concat@latest",
  "_id": "grunt-contrib-concat@1.0.1",
  "_inCache": true,
  "_location": "/grunt-contrib-concat",
  "_nodeVersion": "4.4.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/grunt-contrib-concat-1.0.1.tgz_1461166949774_0.2737891632132232"
  },
  "_npmUser": {
    "name": "shama",
    "email": "kyle@dontkry.com"
  },
  "_npmVersion": "2.15.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunt-contrib-concat",
    "scope": null,
    "escapedName": "grunt-contrib-concat",
    "name": "grunt-contrib-concat",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-contrib-concat/-/grunt-contrib-concat-1.0.1.tgz",
  "_shasum": "61509863084e871d7e86de48c015259ed97745bd",
  "_shrinkwrap": null,
  "_spec": "grunt-contrib-concat",
  "_where": "/var/www/html/dp_alpha",
  "appveyor_id": "l42173901ms416km",
  "author": {
    "name": "Grunt Team",
    "url": "http://gruntjs.com/"
  },
  "bugs": {
    "url": "https://github.com/gruntjs/grunt-contrib-concat/issues"
  },
  "contributors": [
    {
      "name": "\"Cowboy\" Ben Alman",
      "url": "http://benalman.com/"
    },
    {
      "name": "Tyler Kellen",
      "url": "http://goingslowly.com/"
    },
    {
      "name": "Dan Wolff",
      "url": "http://danwolff.se/"
    },
    {
      "name": "Kyle Robinson Young"
    },
    {
      "name": "Vlad Filippov"
    },
    {
      "name": "XhmikosR"
    },
    {
      "name": "Steven Benner"
    },
    {
      "name": "Sindre Sorhus"
    },
    {
      "name": "Michael \"Z\" Goddard"
    },
    {
      "name": "GilbertSun"
    },
    {
      "name": "cbotsikas"
    },
    {
      "name": "Timo Tijhof"
    },
    {
      "name": "Piotr Yordanov"
    },
    {
      "name": "Nick Schonning"
    },
    {
      "name": "MarcelloDiSimone"
    },
    {
      "name": "Manuel Razzari"
    },
    {
      "name": "Joshua Appelman"
    },
    {
      "name": "Jacob Gable"
    },
    {
      "name": "Brady Wetherington"
    }
  ],
  "dependencies": {
    "chalk": "^1.0.0",
    "source-map": "^0.5.3"
  },
  "description": "Concatenate files.",
  "devDependencies": {
    "grunt": "^1.0.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-internal": "^1.1.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-nodeunit": "^1.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "61509863084e871d7e86de48c015259ed97745bd",
    "tarball": "https://registry.npmjs.org/grunt-contrib-concat/-/grunt-contrib-concat-1.0.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "tasks"
  ],
  "gitHead": "dcc347f41a8b77de83f4caa83b0d80f114c2a9fd",
  "homepage": "https://github.com/gruntjs/grunt-contrib-concat#readme",
  "keywords": [
    "gruntplugin"
  ],
  "license": "MIT",
  "main": "tasks/concat.js",
  "maintainers": [
    {
      "name": "cowboy",
      "email": "cowboy@rj3.net"
    },
    {
      "name": "tkellen",
      "email": "tyler@sleekcode.net"
    },
    {
      "name": "shama",
      "email": "kyle@dontkry.com"
    },
    {
      "name": "vladikoff",
      "email": "vlad@vladikoff.com"
    },
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    },
    {
      "name": "jmeas",
      "email": "jellyes2@gmail.com"
    }
  ],
  "name": "grunt-contrib-concat",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "readme": "# grunt-contrib-concat v1.0.1 [![Build Status: Linux](https://travis-ci.org/gruntjs/grunt-contrib-concat.svg?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-concat) [![Build Status: Windows](https://ci.appveyor.com/api/projects/status/l42173901ms416km/branch/master?svg=true)](https://ci.appveyor.com/project/gruntjs/grunt-contrib-concat/branch/master)\n\n> Concatenate files.\n\n\n\n## Getting Started\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-contrib-concat --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-contrib-concat');\n```\n\n\n\n\n## Concat task\n_Run this task with the `grunt concat` command._\n\nTask targets, files and options may be specified according to the Grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n### Options\n\n#### separator\nType: `String`  \nDefault: `grunt.util.linefeed`\n\nConcatenated files will be joined on this string. If you're post-processing concatenated JavaScript files with a minifier, you may need to use a semicolon `';\\n'` as the separator.\n\n#### banner\nType: `String`  \nDefault: `''`\n\nThis string will be prepended to the beginning of the concatenated output. It is processed using [grunt.template.process][], using the default options.\n\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\n\n#### footer\nType: `String`  \nDefault: `''`\n\nThis string will be appended to the end of the concatenated output. It is processed using [grunt.template.process][], using the default options.\n\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\n\n#### stripBanners\nType: `Boolean` `Object`  \nDefault: `false`\n\nStrip JavaScript banner comments from source files.\n\n* `false` - No comments are stripped.\n* `true` - `/* ... */` block comments are stripped, but _NOT_ `/*! ... */` comments.\n* `options` object:\n  * By default, behaves as if `true` were specified.\n  * `block` - If true, _all_ block comments are stripped.\n  * `line` - If true, any contiguous _leading_ `//` line comments are stripped.\n\n#### process\nType: `Boolean` `Object` `Function`  \nDefault: `false`\n\nProcess source files before concatenating, either as [templates][] or with a custom function.\n\n* `false` - No processing will occur.\n* `true` - Process source files using [grunt.template.process][] defaults.\n* `data` object - Process source files using [grunt.template.process][], using the specified options.\n* `function(src, filepath)` - Process source files using the given function, called once for each file. The returned value will be used as source code.\n\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\n\n  [templates]: https://github.com/gruntjs/grunt-docs/blob/master/grunt.template.md\n  [grunt.template.process]: https://github.com/gruntjs/grunt-docs/blob/master/grunt.template.md#grunttemplateprocess\n\n#### sourceMap\nType: `Boolean`  \nDefault: `false`\n\nSet to true to create a source map. The source map will be created alongside the destination file, and share the same file name with the `.map` extension appended to it.\n\n#### sourceMapName\nType: `String` `Function`  \nDefault: `undefined`\n\nTo customize the name or location of the generated source map, pass a string to indicate where to write the source map to. If a function is provided, the concat destination is passed as the argument and the return value will be used as the file name.\n\n#### sourceMapStyle\nType: `String`  \nDefault: `embed`\n\nDetermines the type of source map that is generated. The default value, `embed`, places the content of the sources directly into the map. `link` will reference the original sources in the map as links. `inline` will store the entire map as a data URI in the destination file.\n\n### Usage Examples\n\n#### Concatenating with a custom separator\n\nIn this example, running `grunt concat:dist` (or `grunt concat` because `concat` is a [multi task][multitask]) will concatenate the three specified source files (in order), joining files with `;` and writing the output to `dist/built.js`.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  concat: {\n    options: {\n      separator: ';',\n    },\n    dist: {\n      src: ['src/intro.js', 'src/project.js', 'src/outro.js'],\n      dest: 'dist/built.js',\n    },\n  },\n});\n```\n\n#### Banner comments\n\nIn this example, running `grunt concat:dist` will first strip any preexisting banner comment from the `src/project.js` file, then concatenate the result with a newly-generated banner comment, writing the output to `dist/built.js`.\n\nThis generated banner will be the contents of the `banner` template string interpolated with the config object. In this case, those properties are the values imported from the `package.json` file (which are available via the `pkg` config property) plus today's date.\n\n_Note: you don't have to use an external JSON file. It's also valid to create the `pkg` object inline in the config. That being said, if you already have a JSON file, you might as well reference it._\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  pkg: grunt.file.readJSON('package.json'),\n  concat: {\n    options: {\n      stripBanners: true,\n      banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +\n        '<%= grunt.template.today(\"yyyy-mm-dd\") %> */',\n    },\n    dist: {\n      src: ['src/project.js'],\n      dest: 'dist/built.js',\n    },\n  },\n});\n```\n\n#### Multiple targets\n\nIn this example, running `grunt concat` will build two separate files. One \"basic\" version, with the main file essentially just copied to `dist/basic.js`, and another \"with_extras\" concatenated version written to `dist/with_extras.js`.\n\nWhile each concat target can be built individually by running `grunt concat:basic` or `grunt concat:extras`, running `grunt concat` will build all concat targets. This is because `concat` is a [multi task][multitask].\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  concat: {\n    basic: {\n      src: ['src/main.js'],\n      dest: 'dist/basic.js',\n    },\n    extras: {\n      src: ['src/main.js', 'src/extras.js'],\n      dest: 'dist/with_extras.js',\n    },\n  },\n});\n```\n\n#### Multiple files per target\n\nLike the previous example, in this example running `grunt concat` will build two separate files. One \"basic\" version, with the main file essentially just copied to `dist/basic.js`, and another \"with_extras\" concatenated version written to `dist/with_extras.js`.\n\nThis example differs in that both files are built under the same target.\n\nUsing the `files` object, you can have list any number of source-destination pairs.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  concat: {\n    basic_and_extras: {\n      files: {\n        'dist/basic.js': ['src/main.js'],\n        'dist/with_extras.js': ['src/main.js', 'src/extras.js'],\n      },\n    },\n  },\n});\n```\n\n#### Dynamic filenames\n\nFilenames can be generated dynamically by using `<%= %>` delimited underscore templates as filenames.\n\nIn this example, running `grunt concat:dist` generates a destination file whose name is generated from the `name` and `version` properties of the referenced `package.json` file (via the `pkg` config property).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  pkg: grunt.file.readJSON('package.json'),\n  concat: {\n    dist: {\n      src: ['src/main.js'],\n      dest: 'dist/<%= pkg.name %>-<%= pkg.version %>.js',\n    },\n  },\n});\n```\n\n#### Advanced dynamic filenames\n\nIn this more involved example, running `grunt concat` will build two separate files (because `concat` is a [multi task][multitask]). The destination file paths will be expanded dynamically based on the specified templates, recursively if necessary.\n\nFor example, if the `package.json` file contained `{\"name\": \"awesome\", \"version\": \"1.0.0\"}`, the files `dist/awesome/1.0.0/basic.js` and `dist/awesome/1.0.0/with_extras.js` would be generated.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  pkg: grunt.file.readJSON('package.json'),\n  dirs: {\n    src: 'src/files',\n    dest: 'dist/<%= pkg.name %>/<%= pkg.version %>',\n  },\n  concat: {\n    basic: {\n      src: ['<%= dirs.src %>/main.js'],\n      dest: '<%= dirs.dest %>/basic.js',\n    },\n    extras: {\n      src: ['<%= dirs.src %>/main.js', '<%= dirs.src %>/extras.js'],\n      dest: '<%= dirs.dest %>/with_extras.js',\n    },\n  },\n});\n```\n\n#### Invalid or Missing Files Warning\nIf you would like the `concat` task to warn if a given file is missing or invalid be sure to set `nonull` to `true`:\n\n```js\ngrunt.initConfig({\n  concat: {\n    missing: {\n      src: ['src/invalid_or_missing_file'],\n      dest: 'compiled.js',\n      nonull: true,\n    },\n  },\n});\n```\n\nSee [configuring files for a task](http://gruntjs.com/configuring-tasks#files) for how to configure file globbing in Grunt.\n\n\n#### Custom process function\nIf you would like to do any custom processing before concatenating, use a custom process function:\n\n```js\ngrunt.initConfig({\n  concat: {\n    dist: {\n      options: {\n        // Replace all 'use strict' statements in the code with a single one at the top\n        banner: \"'use strict';\\n\",\n        process: function(src, filepath) {\n          return '// Source: ' + filepath + '\\n' +\n            src.replace(/(^|\\n)[ \\t]*('use strict'|\"use strict\");?\\s*/g, '$1');\n        },\n      },\n      files: {\n        'dist/built.js': ['src/project.js'],\n      },\n    },\n  },\n});\n```\n\n[multitask]: http://gruntjs.com/creating-tasks#multi-tasks\n\n\n## Release History\n\n * 2016-04-20   v1.0.1   Fix for concatenating multiple source map files.\n * 2016-02-20   v1.0.0   Update source-map to 0.5.3. Tag Grunt as peerDep to >=0.4.0. Make source maps generation a little faster. Add `charset:utf-8` to `sourceMappingURL`.\n * 2015-02-20   v0.5.1   Fix path issues with source maps on Windows.\n * 2014-07-19   v0.5.0   Adds `sourceMap` option.\n * 2014-03-21   v0.4.0   README updates. Output updates.\n * 2013-04-25   v0.3.0   Add option to process files with a custom function.\n * 2013-04-08   v0.2.0   Don't normalize separator to allow user to set LF even on a Windows environment.\n * 2013-02-22   v0.1.3   Support footer option.\n * 2013-02-15   v0.1.2   First official release for Grunt 0.4.0.\n * 2013-01-18   v0.1.2rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\n * 2013-01-09   v0.1.2rc5   Updating to work with grunt v0.4.0rc5. Switching back to `this.files` API.\n * 2012-11-13   v0.1.1   Switch to `this.file` API internally.\n * 2012-10-03   v0.1.0   Work in progress, not yet officially released.\n\n---\n\nTask submitted by [\"Cowboy\" Ben Alman](http://benalman.com/)\n\n*This file was generated on Wed Apr 20 2016 08:41:44.*\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gruntjs/grunt-contrib-concat.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.0.1"
}
