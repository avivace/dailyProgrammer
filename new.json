{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;An anagram is a form of word play, where you take a word (or set of words) and form a different word (or different set of words) that use the same letters, just rearranged. All words must be valid spelling, and shuffling words around doesn&amp;#39;t count. &lt;/p&gt;\n\n&lt;p&gt;Some serious word play aficionados find that some anagrams can contain meaning, like &amp;quot;Clint Eastwood&amp;quot; and &amp;quot;Old West Action&amp;quot;, or &amp;quot;silent&amp;quot; and &amp;quot;listen&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;Someone once said, &amp;quot;All the life&amp;#39;s wisdom can be found in anagrams. Anagrams never lie.&amp;quot; How they don&amp;#39;t lie is beyond me, but there you go. &lt;/p&gt;\n\n&lt;p&gt;Punctuation, spaces, and capitalization don&amp;#39;t matter, just treat the letters as you would scrabble tiles.&lt;/p&gt;\n\n&lt;h1&gt;Input Description&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given two words or sets of words separated by a question mark. Your task is to replace the question mark with information about the validity of the anagram. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;Clint Eastwood&amp;quot; ? &amp;quot;Old West Action&amp;quot;\n&amp;quot;parliament&amp;quot; ? &amp;quot;partial man&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Output Description&lt;/h1&gt;\n\n&lt;p&gt;You should replace the question mark with some marker about the validity of the anagram proposed. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;Clint Eastwood&amp;quot; is an anagram of &amp;quot;Old West Action&amp;quot;\n&amp;quot;parliament&amp;quot; is NOT an anagram of &amp;quot;partial man&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;wisdom&amp;quot; ? &amp;quot;mid sow&amp;quot;\n&amp;quot;Seth Rogan&amp;quot; ? &amp;quot;Gathers No&amp;quot;\n&amp;quot;Reddit&amp;quot; ? &amp;quot;Eat Dirt&amp;quot;\n&amp;quot;Schoolmaster&amp;quot; ? &amp;quot;The classroom&amp;quot;\n&amp;quot;Astronomers&amp;quot; ? &amp;quot;Moon starer&amp;quot;\n&amp;quot;Vacation Times&amp;quot; ? &amp;quot;I&amp;#39;m Not as Active&amp;quot;\n&amp;quot;Dormitory&amp;quot; ? &amp;quot;Dirty Rooms&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;wisdom&amp;quot; is an anagram of &amp;quot;mid sow&amp;quot;\n&amp;quot;Seth Rogan&amp;quot; is an anagram of &amp;quot;Gathers No&amp;quot;\n&amp;quot;Reddit&amp;quot; is NOT an anagram of &amp;quot;Eat Dirt&amp;quot;\n&amp;quot;Schoolmaster&amp;quot; is an anagram of &amp;quot;The classroom&amp;quot;\n&amp;quot;Astronomers&amp;quot; is NOT an anagram of &amp;quot;Moon starer&amp;quot;\n&amp;quot;Vacation Times&amp;quot; is an anagram of &amp;quot;I&amp;#39;m Not as Active&amp;quot;\n&amp;quot;Dormitory&amp;quot; is NOT an anagram of &amp;quot;Dirty Rooms&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nAn anagram is a form of word play, where you take a word (or set of words) and form a different word (or different set of words) that use the same letters, just rearranged. All words must be valid spelling, and shuffling words around doesn't count. \n\nSome serious word play aficionados find that some anagrams can contain meaning, like \"Clint Eastwood\" and \"Old West Action\", or \"silent\" and \"listen\".\n\nSomeone once said, \"All the life's wisdom can be found in anagrams. Anagrams never lie.\" How they don't lie is beyond me, but there you go. \n\nPunctuation, spaces, and capitalization don't matter, just treat the letters as you would scrabble tiles.\n\n# Input Description\n\nYou'll be given two words or sets of words separated by a question mark. Your task is to replace the question mark with information about the validity of the anagram. Example:\n\n    \"Clint Eastwood\" ? \"Old West Action\"\n    \"parliament\" ? \"partial man\"\n\n# Output Description\n\nYou should replace the question mark with some marker about the validity of the anagram proposed. Example:\n\n    \"Clint Eastwood\" is an anagram of \"Old West Action\"\n    \"parliament\" is NOT an anagram of \"partial man\"\n\n# Challenge Input\n\n    \"wisdom\" ? \"mid sow\"\n    \"Seth Rogan\" ? \"Gathers No\"\n    \"Reddit\" ? \"Eat Dirt\"\n    \"Schoolmaster\" ? \"The classroom\"\n    \"Astronomers\" ? \"Moon starer\"\n    \"Vacation Times\" ? \"I'm Not as Active\"\n    \"Dormitory\" ? \"Dirty Rooms\"\n\n# Challenge Output\n\n    \"wisdom\" is an anagram of \"mid sow\"\n    \"Seth Rogan\" is an anagram of \"Gathers No\"\n    \"Reddit\" is NOT an anagram of \"Eat Dirt\"\n    \"Schoolmaster\" is an anagram of \"The classroom\"\n    \"Astronomers\" is NOT an anagram of \"Moon starer\"\n    \"Vacation Times\" is an anagram of \"I'm Not as Active\"\n    \"Dormitory\" is NOT an anagram of \"Dirty Rooms\"", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "52enht", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_52enht", "score": 70, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/52enht/20160912_challenge_283_easy_anagram_detector/", "locked": false, "stickied": false, "created": 1473720103.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/52enht/20160912_challenge_283_easy_anagram_detector/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-09-12] Challenge #283 [Easy] Anagram Detector", "created_utc": 1473691303.0, "link_flair_text": null, "distinguished": null, "num_comments": 133, "visited": false, "num_reports": null, "ups": 70}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;From &lt;a href=\"https://en.wikipedia.org/wiki/Hidato\"&gt;wikipedia&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Hidato (Hebrew: \u05d7\u05d9\u05d3\u05d0\u05ea\u05d5\u200e\u200e, originating from the Hebrew word Hida = Riddle) is a logic puzzle game invented by Dr. Gyora M. Benedek, an Israeli mathematician. The goal of Hidato is to fill the grid with consecutive numbers that connect horizontally, vertically, or diagonally. Numbrix puzzles, created by Marilyn vos Savant, are similar to Hidato except that diagonal moves are not allowed. Jadium puzzles (formerly Snakepit puzzles), created by Jeff Marchant, are a more difficult version of Numbrix with fewer given numbers and have appeared on the Parade magazine web site regularly since 2014. The name Hidato is a registered trademark of Doo-Bee Toys and Games LTD, a company co-founded by Benebek himself. Some publishers use different names for this puzzle such as Number Snake.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Further info:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;In Hidato, a grid of cells is given. It is usually square-shaped, like Sudoku or Kakuro, but it can also include irregular shaped grids like hearts, skulls, and so forth. It can have inner holes (like a disc), but it has to be made of only one piece.\nThe goal is to fill the grid with a series of consecutive numbers adjacent to each other vertically, horizontally, or diagonally.\nIn every Hidato puzzle the smallest and the highest numbers are given on the grid. There are also other given numbers on the grid (with values between the smallest and the highest) to help direct the player how to start the solution and to ensure that Hidato has a single solution.\nNote: the above condition on the smallest or highest numbers are sometimes relaxed: only their values can be given, without their positions on the grid (of course, the difference between these values must be equal to the number of cells in the grid minus one). This may lead to harder puzzles.\nEvery well-formed Hidato puzzle is supposed to have a unique solution. Moreover, a Hidato puzzle intended for human solvers should have a solution that can be found by (more or less) simple logic. However, there exist very hard Hidato puzzles, even of small size.\nHidato puzzles are published in newspapers such as the Daily Mail and Detroit Free Press.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;So basically:&lt;/p&gt;\n\n&lt;p&gt;You&amp;#39;ll recieve a grid with numbers, empty spaces and blocked spaces.&lt;/p&gt;\n\n&lt;p&gt;You need to fill in all empty spaces with numbers. These numbers must be consecutive that connect in any direction.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;A Hidato puzzle to solve.&lt;/p&gt;\n\n&lt;h3&gt;Input 1&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;. 33 35 . . x x x\n. . 24 22 . x x x\n. . . 21 . . x x\n. 26 . 13 40 11 x x\n27 . . . 9 . 1 x\nx x . . 18 . . x\nx x x x . 7 . .\nx x x x x x 5 .\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Input 2&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;. . 3 . . . . .\nx x x x x x x .\n. . . . . . . .\n. x x x x x x x\n. . . . . . . .\nx x x x x x x .\n. . . . . . . .\n. x x x x x x x\n. . . . . . . .\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Input 3&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;1 .\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Input 4&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;1 .\nx .\n5 .\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Input 5&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;. 4 5 16\n8 6 . .\n. 12 . 14\n10 . 13 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Input 6&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;1 . . 23 . .\n11 . 3 . . 18\n. 13 . . . .\n. . . . 26 .\n8 . . 15 . 30\n. . 36 . . 31\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;A solved Hidato&lt;/p&gt;\n\n&lt;h3&gt;Output 1&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;32 33 35 36 37 x x x\n31 34 24 22 38 x x x\n30 25 23 21 12 39 x x\n29 26 20 13 40 11 x x\n27 28 14 19 9 10 1 x\nx x 15 16 18 8 2 x\nx x x x 17 7 6 3\nx x x x x x 5 4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output 2&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;1 2 3 4 5 6 7 8\nx x x x x x x 9\n17 16 15 14 13 12 11 10\n18 x x x x x x x\n19 20 21 22 23 24 25 26\nx x x x x x x 27\n35 34 33 32 31 30 29 28\n36 x x x x x x x\n37 38 39 40 41 42 43 44\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output 3&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;1 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output 4&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;1 2\nx 3\n5 4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output 5&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;7 4 5 16\n8 6 3 15\n9 12 2 14\n10 11 13 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Output 6&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;1 2 22 23 20 19\n11 12 3 21 24 18\n10 13 4 25 17 27\n9 5 14 16 26 28\n8 6 34 15 29 30\n7 35 36 33 32 31\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;Also from &lt;a href=\"https://en.wikipedia.org/wiki/Hidato\"&gt;wikipedia&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;As in many logic puzzles, the basic resolution technique consists of analyzing the possibilities for each number of being present in each cell. When a cell can contain only one number (Naked Single) or when a number has only one possible place (Hidden Single), it can be asserted as belonging to the solution.\nOne key to the solution is, it does not have to be built in ascending (or descending) order; it can be built piecewise, with pieces starting from different givens.\nAs in the Sudoku case, the resolution of harder Hidato or Numbrix puzzles requires the use of more complex techniques - in particular of various types of chain patterns.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nFrom [wikipedia](https://en.wikipedia.org/wiki/Hidato)\n\n&gt; Hidato (Hebrew: \u05d7\u05d9\u05d3\u05d0\u05ea\u05d5\u200e\u200e, originating from the Hebrew word Hida = Riddle) is a logic puzzle game invented by Dr. Gyora M. Benedek, an Israeli mathematician. The goal of Hidato is to fill the grid with consecutive numbers that connect horizontally, vertically, or diagonally. Numbrix puzzles, created by Marilyn vos Savant, are similar to Hidato except that diagonal moves are not allowed. Jadium puzzles (formerly Snakepit puzzles), created by Jeff Marchant, are a more difficult version of Numbrix with fewer given numbers and have appeared on the Parade magazine web site regularly since 2014. The name Hidato is a registered trademark of Doo-Bee Toys and Games LTD, a company co-founded by Benebek himself. Some publishers use different names for this puzzle such as Number Snake.\n\nFurther info:\n\n&gt; In Hidato, a grid of cells is given. It is usually square-shaped, like Sudoku or Kakuro, but it can also include irregular shaped grids like hearts, skulls, and so forth. It can have inner holes (like a disc), but it has to be made of only one piece.\nThe goal is to fill the grid with a series of consecutive numbers adjacent to each other vertically, horizontally, or diagonally.\nIn every Hidato puzzle the smallest and the highest numbers are given on the grid. There are also other given numbers on the grid (with values between the smallest and the highest) to help direct the player how to start the solution and to ensure that Hidato has a single solution.\nNote: the above condition on the smallest or highest numbers are sometimes relaxed: only their values can be given, without their positions on the grid (of course, the difference between these values must be equal to the number of cells in the grid minus one). This may lead to harder puzzles.\nEvery well-formed Hidato puzzle is supposed to have a unique solution. Moreover, a Hidato puzzle intended for human solvers should have a solution that can be found by (more or less) simple logic. However, there exist very hard Hidato puzzles, even of small size.\nHidato puzzles are published in newspapers such as the Daily Mail and Detroit Free Press.\n\n\nSo basically:\n\nYou'll recieve a grid with numbers, empty spaces and blocked spaces.\n\nYou need to fill in all empty spaces with numbers. These numbers must be consecutive that connect in any direction.\n\n#Formal Inputs &amp; Outputs\n\n##Input description\n\nA Hidato puzzle to solve.\n\n###Input 1\n\n    . 33 35 . . x x x\n    . . 24 22 . x x x\n    . . . 21 . . x x\n    . 26 . 13 40 11 x x\n    27 . . . 9 . 1 x\n    x x . . 18 . . x\n    x x x x . 7 . .\n    x x x x x x 5 .\n\n###Input 2\n\n    . . 3 . . . . .\n    x x x x x x x .\n    . . . . . . . .\n    . x x x x x x x\n    . . . . . . . .\n    x x x x x x x .\n    . . . . . . . .\n    . x x x x x x x\n    . . . . . . . .\n\n###Input 3\n\n    1 .\n\n###Input 4\n\n    1 .\n    x .\n    5 .\n\n###Input 5\n\n    . 4 5 16\n    8 6 . .\n    . 12 . 14\n    10 . 13 1\n\n###Input 6\n\n    1 . . 23 . .\n    11 . 3 . . 18\n    . 13 . . . .\n    . . . . 26 .\n    8 . . 15 . 30\n    . . 36 . . 31\n\n##Output description\n\nA solved Hidato\n\n###Output 1\n\n    32 33 35 36 37 x x x\n    31 34 24 22 38 x x x\n    30 25 23 21 12 39 x x\n    29 26 20 13 40 11 x x\n    27 28 14 19 9 10 1 x\n    x x 15 16 18 8 2 x\n    x x x x 17 7 6 3\n    x x x x x x 5 4\n\n###Output 2\n\n    1 2 3 4 5 6 7 8\n    x x x x x x x 9\n    17 16 15 14 13 12 11 10\n    18 x x x x x x x\n    19 20 21 22 23 24 25 26\n    x x x x x x x 27\n    35 34 33 32 31 30 29 28\n    36 x x x x x x x\n    37 38 39 40 41 42 43 44\n\n###Output 3\n\n    1 2\n\n###Output 4\n\n    1 2\n    x 3\n    5 4\n\n###Output 5\n\n    7 4 5 16\n    8 6 3 15\n    9 12 2 14\n    10 11 13 1\n\n###Output 6\n\n    1 2 22 23 20 19\n    11 12 3 21 24 18\n    10 13 4 25 17 27\n    9 5 14 16 26 28\n    8 6 34 15 29 30\n    7 35 36 33 32 31\n\n#Notes/Hints\n\nAlso from [wikipedia](https://en.wikipedia.org/wiki/Hidato)\n\n&gt; As in many logic puzzles, the basic resolution technique consists of analyzing the possibilities for each number of being present in each cell. When a cell can contain only one number (Naked Single) or when a number has only one possible place (Hidden Single), it can be asserted as belonging to the solution.\n&gt; One key to the solution is, it does not have to be built in ascending (or descending) order; it can be built piecewise, with pieces starting from different givens.\n&gt; As in the Sudoku case, the resolution of harder Hidato or Numbrix puzzles requires the use of more complex techniques - in particular of various types of chain patterns.\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "51wg0j", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_51wg0j", "score": 53, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1473429526.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/51wg0j/20160909_challenge_282_hard_hidato/", "locked": false, "stickied": false, "created": 1473440100.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/51wg0j/20160909_challenge_282_hard_hidato/", "author_flair_text": null, "quarantine": false, "title": "[2016-09-09] Challenge #282 [Hard] Hidato", "created_utc": 1473411300.0, "link_flair_text": null, "distinguished": null, "num_comments": 18, "visited": false, "num_reports": null, "ups": 53}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://boardgamegeek.com/boardgame/3190/quixo\"&gt;Quixo&lt;/a&gt; is a grid based game. The game is played by 2 groups, one being &lt;code&gt;x&lt;/code&gt; and other being &lt;code&gt;o&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The goal of the game is to get 5 blocks in a row.\nThe blocks can only be taken from the sides and must be placed in a line, pushing all the other blocks.&lt;/p&gt;\n\n&lt;p&gt;from &lt;a href=\"https://boardgamegeek.com/boardgame/3190/quixo\"&gt;boardgamegeek&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;On a turn, the active player takes a cube that is blank or bearing his symbol from the outer ring of the grid, rotates it so that it shows his symbol (if needed), then adds it to the grid by pushing it into one of the rows from which it was removed. Thus, a few pieces of the grid change places each turn, and the cubes slowly go from blank to crosses and circles. Play continues until someone forms an orthogonal or diagonal line of five cubes bearing his symbol, with this person winning the game.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;If the block comes from a corner, you have 2 options&lt;/p&gt;\n\n&lt;p&gt;Start:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;&lt;/th&gt;\n&lt;th&gt;A&lt;/th&gt;\n&lt;th&gt;B&lt;/th&gt;\n&lt;th&gt;C&lt;/th&gt;\n&lt;th&gt;D&lt;/th&gt;\n&lt;th&gt;E&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;4&lt;/td&gt;\n&lt;td&gt;x&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;5&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;Option 1:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;&lt;/th&gt;\n&lt;th&gt;A&lt;/th&gt;\n&lt;th&gt;B&lt;/th&gt;\n&lt;th&gt;C&lt;/th&gt;\n&lt;th&gt;D&lt;/th&gt;\n&lt;th&gt;E&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;4&lt;/td&gt;\n&lt;td&gt;x&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;5&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;Option 2:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;&lt;/th&gt;\n&lt;th&gt;A&lt;/th&gt;\n&lt;th&gt;B&lt;/th&gt;\n&lt;th&gt;C&lt;/th&gt;\n&lt;th&gt;D&lt;/th&gt;\n&lt;th&gt;E&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;td&gt;x&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;4&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;5&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;If the block is from the middle of the row, you have 3 options&lt;/p&gt;\n\n&lt;p&gt;Start:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;&lt;/th&gt;\n&lt;th&gt;A&lt;/th&gt;\n&lt;th&gt;B&lt;/th&gt;\n&lt;th&gt;C&lt;/th&gt;\n&lt;th&gt;D&lt;/th&gt;\n&lt;th&gt;E&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;x&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;4&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;5&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;Option 1:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;&lt;/th&gt;\n&lt;th&gt;A&lt;/th&gt;\n&lt;th&gt;B&lt;/th&gt;\n&lt;th&gt;C&lt;/th&gt;\n&lt;th&gt;D&lt;/th&gt;\n&lt;th&gt;E&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;x&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;4&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;5&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;Option 2:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;&lt;/th&gt;\n&lt;th&gt;A&lt;/th&gt;\n&lt;th&gt;B&lt;/th&gt;\n&lt;th&gt;C&lt;/th&gt;\n&lt;th&gt;D&lt;/th&gt;\n&lt;th&gt;E&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;x&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;4&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;5&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;Option 3:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;&lt;/th&gt;\n&lt;th&gt;A&lt;/th&gt;\n&lt;th&gt;B&lt;/th&gt;\n&lt;th&gt;C&lt;/th&gt;\n&lt;th&gt;D&lt;/th&gt;\n&lt;th&gt;E&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;x&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;4&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;o&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;5&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;td&gt;_&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;You can only move your own blocks or blanco block directly. If you use a blanco block, then that block becomes yours.&lt;/p&gt;\n\n&lt;p&gt;For those who can&amp;#39;t make up the rules by reading this, you can watch &lt;a href=\"https://www.youtube.com/watch?v=cZT5N6hIFYM\"&gt;this 2 min instruction video&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;If your move causes the other players block to line up as well as yours, then it&amp;#39;s called a &lt;code&gt;draw&lt;/code&gt;&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;You will be given a 5 by 5 grid with a game on that is almost finished, you only need to make the winning move.&lt;/p&gt;\n\n&lt;p&gt;You are always the player with &lt;code&gt;x&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;Input&lt;/h2&gt;\n\n&lt;p&gt;The grid with the current game&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;x_xxx\n_xo_o\no_ooo\noxox_\noooo_\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output&lt;/h2&gt;\n\n&lt;p&gt;The move that will make you have won the game&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;B1 -&amp;gt; B5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here you have me doing this with the actual game&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"http://imgur.com/NywAMsM\"&gt;step 1&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"http://imgur.com/tb4sFIU\"&gt;step 2&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"http://imgur.com/zldLzcN\"&gt;step 3&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Challenge input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;x_xxx\n_xo_o\no_ooo\noxooo\nooxx_\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Challenge output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;B1 -&amp;gt; A1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Inputs from &lt;a href=\"/u/zandekar\"&gt;/u/zandekar&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;no winning moves&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xxxox\n__ooo\noooxo\nxxxoo\nxxooo\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;more than one winning move&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xxxox\nxxxxo\n___ox\noooxo\nxxx_o\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;a draw&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;oooxx\nxxx_x\noooxo\nxoxox\nxoxox\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Note&lt;/h1&gt;\n\n&lt;p&gt;Sometimes there is more then 1 correct answer, giving just one is fine.&lt;/p&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Give all possible answers to win.&lt;/p&gt;\n\n&lt;h2&gt;Input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;x_xxx\n_xo_o\no_ooo\noxox_\noooo_\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;B1 -&amp;gt; B5\nB1 -&amp;gt; A1\nB1 -&amp;gt; E1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Edits&lt;/h1&gt;\n\n&lt;p&gt;Some additional challenges and info from &lt;a href=\"/u/zandekar\"&gt;/u/zandekar&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\n[Quixo](https://boardgamegeek.com/boardgame/3190/quixo) is a grid based game. The game is played by 2 groups, one being `x` and other being `o`.\n\nThe goal of the game is to get 5 blocks in a row.\nThe blocks can only be taken from the sides and must be placed in a line, pushing all the other blocks.\n\nfrom [boardgamegeek](https://boardgamegeek.com/boardgame/3190/quixo):\n\n&gt; On a turn, the active player takes a cube that is blank or bearing his symbol from the outer ring of the grid, rotates it so that it shows his symbol (if needed), then adds it to the grid by pushing it into one of the rows from which it was removed. Thus, a few pieces of the grid change places each turn, and the cubes slowly go from blank to crosses and circles. Play continues until someone forms an orthogonal or diagonal line of five cubes bearing his symbol, with this person winning the game.\n\nIf the block comes from a corner, you have 2 options\n\nStart:\n\n  | A | B | C | D | E \n---|---|----|----|----|----\n1 | **x** | _ | _ | _ | o\n2 | _ | _ | _ | _ | _\n3 | _ | _ | _ | _ | _\n4 | x | _ | _ | _ | o\n5 | _ | _ | _ | _ | _\n\nOption 1:\n\n  | A | B | C | D | E \n---|---|----|----|----|----\n1 | _ | _ | _ | o | **x**\n2 | _ | _ | _ | _ | _\n3 | _ | _ | _ | _ | _\n4 | x | _ | _ | _ | o\n5 | _ | _ | _ | _ | _\n\nOption 2:\n\n  | A | B | C | D | E \n---|---|----|----|----|----\n1 | _ | _ | _ | _ | o\n2 | _ | _ | _ | _ | _\n3 | x | _ | _ | _ | _\n4 | _ | _ | _ | _ | o\n5 | **x** | _ | _ | _ | _\n\nIf the block is from the middle of the row, you have 3 options\n\nStart:\n\n  | A | B | C | D | E \n---|---|----|----|----|----\n1 | x | _ | _ | _ | o\n2 | _ | _ | _ | _ | _\n3 | _ | _ | _ | _ | _\n4 | **x** | _ | _ | _ | o\n5 | _ | _ | _ | _ | _\n\nOption 1:\n\n  | A | B | C | D | E \n---|---|----|----|----|----\n1 | x | _ | _ | _ | o\n2 | _ | _ | _ | _ | _\n3 | _ | _ | _ | _ | _\n4 | _ | _ | _ | _ | o\n5 | **x** | _ | _ | _ | _\n\nOption 2:\n\n  | A | B | C | D | E \n---|---|----|----|----|----\n1 | **x** | _ | _ | _ | o\n2 | x | _ | _ | _ | _\n3 | _ | _ | _ | _ | _\n4 | _ | _ | _ | _ | o\n5 | _ | _ | _ | _ | _\n\nOption 3:\n\n  | A | B | C | D | E \n---|---|----|----|----|----\n1 | x | _ | _ | _ | o\n2 | _ | _ | _ | _ | _\n3 | _ | _ | _ | _ | _\n4 | _ | _ | _ | o | **x**\n5 | _ | _ | _ | _ | _\n\n\nYou can only move your own blocks or blanco block directly. If you use a blanco block, then that block becomes yours.\n\nFor those who can't make up the rules by reading this, you can watch [this 2 min instruction video](https://www.youtube.com/watch?v=cZT5N6hIFYM).\n\nIf your move causes the other players block to line up as well as yours, then it's called a `draw`\n\n#Challenge\n\nYou will be given a 5 by 5 grid with a game on that is almost finished, you only need to make the winning move.\n\nYou are always the player with `x`\n\n##Input\n\nThe grid with the current game\n\n    x_xxx\n    _xo_o\n    o_ooo\n    oxox_\n    oooo_\n\n\n## Output\nThe move that will make you have won the game\n\n    B1 -&gt; B5\n\nHere you have me doing this with the actual game\n\n - [step 1](http://imgur.com/NywAMsM)\n - [step 2](http://imgur.com/tb4sFIU)\n - [step 3](http://imgur.com/zldLzcN)\n\n##Challenge input 1\n\n    x_xxx\n    _xo_o\n    o_ooo\n    oxooo\n    ooxx_\n\n##Challenge output 1\n\n    B1 -&gt; A1\n\n##Inputs from /u/zandekar\n\nno winning moves\n    \n    xxxox\n    __ooo\n    oooxo\n    xxxoo\n    xxooo\n\nmore than one winning move\n    \n    xxxox\n    xxxxo\n    ___ox\n    oooxo\n    xxx_o\n\na draw\n\n    oooxx\n    xxx_x\n    oooxo\n    xoxox\n    xoxox\n\n#Note\n\nSometimes there is more then 1 correct answer, giving just one is fine.\n\n#Bonus\n\nGive all possible answers to win.\n\n##Input 1\n\n    x_xxx\n    _xo_o\n    o_ooo\n    oxox_\n    oooo_\n\n##Output 1\n\n    B1 -&gt; B5\n    B1 -&gt; A1\n    B1 -&gt; E1\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas\n\n#Edits\n\nSome additional challenges and info from /u/zandekar", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "51l1j1", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_51l1j1", "score": 53, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1473313419.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/51l1j1/20160907_challenge_282_intermediate_the_final/", "locked": false, "stickied": false, "created": 1473280867.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/51l1j1/20160907_challenge_282_intermediate_the_final/", "author_flair_text": null, "quarantine": false, "title": "[2016-09-07] Challenge #282 [Intermediate] The final Quixo move", "created_utc": 1473252067.0, "link_flair_text": null, "distinguished": null, "num_comments": 36, "visited": false, "num_reports": null, "ups": 53}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;[Easy/Intermediate] Unusual Bases&lt;/p&gt;\n\n&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Binary numbers (base 2) are written using &lt;code&gt;1&lt;/code&gt;s and &lt;code&gt;0&lt;/code&gt;s to represent which powers of 2 sum together to create the decimal number.&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;16&lt;/th&gt;\n&lt;th&gt;8&lt;/th&gt;\n&lt;th&gt;4&lt;/th&gt;\n&lt;th&gt;2&lt;/th&gt;\n&lt;th&gt;1&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;A &lt;code&gt;1&lt;/code&gt; represents using that power of 2 and a &lt;code&gt;0&lt;/code&gt; means not using it. In the above example there is a one in the &lt;code&gt;16&lt;/code&gt;s, &lt;code&gt;2&lt;/code&gt;s and the &lt;code&gt;1&lt;/code&gt;s so we do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;10011 = 16 + 2 + 1 = 19\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;meaning that &lt;code&gt;10011&lt;/code&gt; is binary for &lt;code&gt;19&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The Fibonacci Sequence has a similar property that any positive integer can be written in the form of Fibonacci numbers (with no repeats). For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;25 = 21 + 3 + 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If we use the same form as for writing binary, with the Fibonacci sequence instead of powers of 2, we can represent which Fibonacci numbers we use with a 1, and the ones we don&amp;#39;t with a 0.&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;13&lt;/th&gt;\n&lt;th&gt;8&lt;/th&gt;\n&lt;th&gt;5&lt;/th&gt;\n&lt;th&gt;3&lt;/th&gt;\n&lt;th&gt;2&lt;/th&gt;\n&lt;th&gt;1&lt;/th&gt;\n&lt;th&gt;1&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;pre&gt;&lt;code&gt;1010010 = 13 + 5 + 1 = 19\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;meaning that &lt;code&gt;101001&lt;/code&gt; is &amp;#39;Base Fib&amp;#39; for &lt;code&gt;19&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The task is to create a converter to convert to and from decimal to &amp;#39;Base Fib&amp;#39;\nDue to the nature of the Fibonacci Sequence, many numbers have multiple representations in &amp;#39;Base Fib&amp;#39;, for the moment these are to be ignored - any form is acceptable.&lt;/p&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;You will be given a line of input for each conversion, stating the base it is currently in, and the number to convert seperated by space&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;10 16\n10 32\n10 9024720\nF 10\nF 1\nF 111111\nF 100000\nF 10110110100111001\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;The program should output the converted number, in it&amp;#39;s expected base, e.g.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1001000\n10101000\n1010100101010100000010001000010010\n1\n1\n20\n8\n2868 \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"http://planetmath.org/listoffibonaccinumbers\"&gt;List of Fibonacci Numbers&lt;/a&gt;, though you can generate these yourself quite easily.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Your language probably already has a list of primes, although for the bonus you may need to create you own list of Fibonacci Numbers&lt;/p&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Now, a specific form is required for the &amp;#39;Base Fib&amp;#39; answers.&lt;/p&gt;\n\n&lt;p&gt;Because each term of the sequence is the sum of the previous two, the &amp;#39;Base Fib&amp;#39; form of a decimal number in the Fibonacci sequence can either be the term itself, or the previous two, e.g.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;8             = 100000\n8 = 5 + 3     = 11000\n8 = 5 + 2 + 1 = 10101\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For the bonus challenge, give the output with the least &lt;code&gt;1&lt;/code&gt;&amp;#39;s.&lt;/p&gt;\n\n&lt;h2&gt;Bonus input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;10 8\n10 16\n10 32\n10 9024720\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus 2&lt;/h1&gt;\n\n&lt;p&gt;As &lt;a href=\"/u/thorwing\"&gt;/u/thorwing&lt;/a&gt; suggested, it would be a greater challenge to write the base fib with the most &lt;code&gt;1&lt;/code&gt;&amp;#39;s instead of the least&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea like &lt;a href=\"/u/SovietKetchup\"&gt;/u/SovietKetchup&lt;/a&gt;?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Edit&lt;/h1&gt;\n\n&lt;p&gt;As some of you have pointed out, my solution had a small bug in it. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;9024720 -&amp;gt; 1010100101010100000010001000010010\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "[Easy/Intermediate] Unusual Bases\n\n# Description\n\nBinary numbers (base 2) are written using `1`s and `0`s to represent which powers of 2 sum together to create the decimal number.\n\n16 | 8 | 4 | 2 | 1 \n---|---|----|----|----\n1 | 0 | 0 | 1 | 1 \n\nA `1` represents using that power of 2 and a `0` means not using it. In the above example there is a one in the `16`s, `2`s and the `1`s so we do:\n\n    10011 = 16 + 2 + 1 = 19\n\nmeaning that `10011` is binary for `19`\n\nThe Fibonacci Sequence has a similar property that any positive integer can be written in the form of Fibonacci numbers (with no repeats). For example:\n\n    25 = 21 + 3 + 1\n\nIf we use the same form as for writing binary, with the Fibonacci sequence instead of powers of 2, we can represent which Fibonacci numbers we use with a 1, and the ones we don't with a 0.\n\n13 | 8 | 5 | 3 | 2 | 1 | 1\n|--- |---|---|----|----|----|----\n1 | 0 | 1 | 0 | 0 | 1 | 0\n\n    1010010 = 13 + 5 + 1 = 19\n\nmeaning that `101001` is 'Base Fib' for `19`\n\nThe task is to create a converter to convert to and from decimal to 'Base Fib'\nDue to the nature of the Fibonacci Sequence, many numbers have multiple representations in 'Base Fib', for the moment these are to be ignored - any form is acceptable.\n\n## Input description\n\nYou will be given a line of input for each conversion, stating the base it is currently in, and the number to convert seperated by space\n\n    10 16\n    10 32\n    10 9024720\n    F 10\n    F 1\n    F 111111\n    F 100000\n    F 10110110100111001\n\n## Output description\n\nThe program should output the converted number, in it's expected base, e.g.\n\n    1001000\n    10101000\n    1010100101010100000010001000010010\n    1\n    1\n    20\n    8\n    2868 \n\n# Notes/Hints\n\n* [List of Fibonacci Numbers](http://planetmath.org/listoffibonaccinumbers), though you can generate these yourself quite easily.\n\nYour language probably already has a list of primes, although for the bonus you may need to create you own list of Fibonacci Numbers\n\n# Bonus\n\nNow, a specific form is required for the 'Base Fib' answers.\n\nBecause each term of the sequence is the sum of the previous two, the 'Base Fib' form of a decimal number in the Fibonacci sequence can either be the term itself, or the previous two, e.g.\n\n    8             = 100000\n    8 = 5 + 3     = 11000\n    8 = 5 + 2 + 1 = 10101\n\nFor the bonus challenge, give the output with the least `1`'s.\n\n\n##Bonus input\n\n    10 8\n    10 16\n    10 32\n    10 9024720\n\n#Bonus 2\n\nAs /u/thorwing suggested, it would be a greater challenge to write the base fib with the most `1`'s instead of the least\n\n# Finally\n\nHave a good challenge idea like /u/SovietKetchup?\n\nConsider submitting it to /r/dailyprogrammer_ideas\n\n\n# Edit\nAs some of you have pointed out, my solution had a small bug in it. \n\n    9024720 -&gt; 1010100101010100000010001000010010", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "5196fi", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_5196fi", "score": 68, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1473103284.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/5196fi/20160905_challenge_282_easy_unusual_bases/", "locked": false, "stickied": false, "created": 1473107142.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/5196fi/20160905_challenge_282_easy_unusual_bases/", "author_flair_text": null, "quarantine": false, "title": "[2016-09-05] Challenge #282 [Easy] Unusual Bases", "created_utc": 1473078342.0, "link_flair_text": null, "distinguished": null, "num_comments": 97, "visited": false, "num_reports": null, "ups": 68}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;In this challenge you will come up with an algorithm to solve the classic game of &lt;a href=\"http://minesweeperonline.com/\"&gt;Minesweeper&lt;/a&gt;.\nThe brute force approach is impractical since the search space size is anywhere around 10&lt;sup&gt;20&lt;/sup&gt; to 10&lt;sup&gt;100&lt;/sup&gt; depending on the situation, you&amp;#39;ll have to come up with something clever.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;The current field state where each character represents one field. Flags will not be used. \nHidden/unknown fields are denoted with a &amp;#39;?&amp;#39;.&lt;br/&gt;\n&amp;#39;Zero-fields&amp;#39; with no mines around are denoted with a space.&lt;/p&gt;\n\n&lt;p&gt;Example for a 9x9 board:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    1????\n    1????\n    111??\n      1??\n1211  1??\n???21 1??\n????211??\n?????????\n?????????\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;A list of zero-based row and column coordinates for the fields that you have determined to be &lt;strong&gt;SAFE&lt;/strong&gt;. For the above input example this would be:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0 5\n1 6\n1 7\n2 7\n3 7\n5 1\n5 7\n6 2\n6 7\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The list does not need to be ordered.&lt;/p&gt;\n\n&lt;h2&gt;Challenge input&lt;/h2&gt;\n\n&lt;p&gt;As suggested by &lt;a href=\"/u/wutaki\"&gt;/u/wutaki&lt;/a&gt;, this input is a greater challenge then the original input&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;??????\n???2??\n???4??\n?2??2?\n?2222?\n?1  1?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;If you have no idea where to start I suggest you play the game for a while and try to formalize your strategy.&lt;/p&gt;\n\n&lt;p&gt;Minesweeper is a game of both logic and luck. &lt;a href=\"http://i.imgur.com/yLhxzrl.jpg\"&gt;Sometimes it is impossible&lt;/a&gt; to find free fields through logic. The right output would then be an empty list. Your algorithm does not need to guess.&lt;/p&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Extra hard mode: Make a closed-loop bot. It should take a screenshot, parse the board state from the pixels, run the algorithm and manipulate the cursor to execute the clicks.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Note: If this idea is selected for submission I&amp;#39;ll be able to provide lots of input/output examples using my own solution.&lt;/em&gt;&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea like &lt;a href=\"/u/janismac\"&gt;/u/janismac&lt;/a&gt; did?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nIn this challenge you will come up with an algorithm to solve the classic game of [Minesweeper](http://minesweeperonline.com/).\nThe brute force approach is impractical since the search space size is anywhere around 10^20 to 10^100 depending on the situation, you'll have to come up with something clever.\n\n#Formal Inputs &amp; Outputs\n\n##Input description\n\nThe current field state where each character represents one field. Flags will not be used. \nHidden/unknown fields are denoted with a '?'.   \n'Zero-fields' with no mines around are denoted with a space.\n\nExample for a 9x9 board:\n\n        1????\n        1????\n        111??\n          1??\n    1211  1??\n    ???21 1??\n    ????211??\n    ?????????\n    ?????????\n\n##Output description\n\nA list of zero-based row and column coordinates for the fields that you have determined to be **SAFE**. For the above input example this would be:\n\n    0 5\n    1 6\n    1 7\n    2 7\n    3 7\n    5 1\n    5 7\n    6 2\n    6 7\n\nThe list does not need to be ordered.\n\n\n##Challenge input\n\nAs suggested by /u/wutaki, this input is a greater challenge then the original input\n\n\n    ??????\n    ???2??\n    ???4??\n    ?2??2?\n    ?2222?\n    ?1  1?\n\n#Notes/Hints\n\nIf you have no idea where to start I suggest you play the game for a while and try to formalize your strategy.\n\nMinesweeper is a game of both logic and luck. [Sometimes it is impossible](http://i.imgur.com/yLhxzrl.jpg) to find free fields through logic. The right output would then be an empty list. Your algorithm does not need to guess.\n\n#Bonus\n\nExtra hard mode: Make a closed-loop bot. It should take a screenshot, parse the board state from the pixels, run the algorithm and manipulate the cursor to execute the clicks.\n\n*Note: If this idea is selected for submission I'll be able to provide lots of input/output examples using my own solution.*\n\n#Finally\n\nHave a good challenge idea like /u/janismac did?\n\nConsider submitting it to /r/dailyprogrammer_ideas", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "50s3ax", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_50s3ax", "score": 94, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1472988756.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/50s3ax/20160902_challenge_281_hard_minesweeper_solver/", "locked": false, "stickied": false, "created": 1472830283.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/50s3ax/20160902_challenge_281_hard_minesweeper_solver/", "author_flair_text": null, "quarantine": false, "title": "[2016-09-02] Challenge #281 [Hard] Minesweeper Solver", "created_utc": 1472801483.0, "link_flair_text": null, "distinguished": null, "num_comments": 35, "visited": false, "num_reports": null, "ups": 94}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;If you&amp;#39;re named Danny Kyung or Matthew Emes, it opens up the possibility of justifying your use of usernames such as &lt;a href=\"https://github.com/dank\"&gt;dank&lt;/a&gt; or &lt;a href=\"https://github.com/memes\"&gt;memes&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Your task is to find the longest word such that it satisfies the criteria - that is, it is a substring of the given string but not necessarily consecutively (we can call it a sparse substring). \nIf there are multiple words of same maximum length, output all of them.&lt;/p&gt;\n\n&lt;p&gt;You may use the &lt;a href=\"http://norvig.com/ngrams/enable1.txt\"&gt;the Enable word list&lt;/a&gt;, or some other reasonable English word list. Every word in your output must appear in your word list.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;One string.&lt;/p&gt;\n\n&lt;h2&gt;Example Inputs&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Donald Knuth\nAlan Turing\nClaude Shannon\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;A single word (ouptut the lengthiest word/words in case of multiple words satisfying the criteria)&lt;/p&gt;\n\n&lt;h2&gt;Example outputs&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Donut (because **Don**ald k**nut**h)\nAlanin, Anting\nCannon\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note : Your outputs may differ from these outputs depending on the word list you are using&lt;/p&gt;\n\n&lt;h2&gt;Challenge Inputs&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Ada Lovelace\nHaskell Curry\n**Your own name!**\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Find a combination of words that satisfy the criteria. For example, &amp;quot;AlantRing&amp;quot; in &amp;quot;&lt;strong&gt;Alan T&lt;/strong&gt;ur&lt;strong&gt;ing&lt;/strong&gt;&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;In case of multiple combination of words that satisfy the criteria, find the word with the highest score and print that, where the score is sum of squares of length of all the constituent words&lt;/p&gt;\n\n&lt;p&gt;For example, in &amp;quot;Alan Turing&amp;quot;,&lt;br/&gt;\nscore of AlantRing is  5&lt;sup&gt;2&lt;/sup&gt; + 4&lt;sup&gt;2&lt;/sup&gt; = 41,&lt;br/&gt;\nscore of AlAnting is 2&lt;sup&gt;2&lt;/sup&gt; + 6&lt;sup&gt;2&lt;/sup&gt; = 40,&lt;br/&gt;\nscore of Alanin is 6&lt;sup&gt;2&lt;/sup&gt; = 36&lt;/p&gt;\n\n&lt;p&gt;and thus of the three, the first should be printed because of highest score.&lt;/p&gt;\n\n&lt;h2&gt;Bonus Inputs&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;Donald Knuth\nAlan Turing\nClaude Shannon\nAda Lovelace\nHaskell Curry\n**Your own name!**\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea like &lt;a href=\"/u/automata-door\"&gt;/u/automata-door&lt;/a&gt; did?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nIf you're named Danny Kyung or Matthew Emes, it opens up the possibility of justifying your use of usernames such as [dank](https://github.com/dank) or [memes](https://github.com/memes).\n\nYour task is to find the longest word such that it satisfies the criteria - that is, it is a substring of the given string but not necessarily consecutively (we can call it a sparse substring). \nIf there are multiple words of same maximum length, output all of them.\n\nYou may use the [the Enable word list](http://norvig.com/ngrams/enable1.txt), or some other reasonable English word list. Every word in your output must appear in your word list.\n\n# Formal Inputs &amp; Outputs\n## Input description\n\nOne string.\n\n## Example Inputs\n\n    Donald Knuth\n    Alan Turing\n    Claude Shannon\n\n## Output description\nA single word (ouptut the lengthiest word/words in case of multiple words satisfying the criteria)\n\n## Example outputs\n\n    Donut (because **Don**ald k**nut**h)\n    Alanin, Anting\n    Cannon\n\nNote : Your outputs may differ from these outputs depending on the word list you are using\n\n## Challenge Inputs\n\n    Ada Lovelace\n    Haskell Curry\n    **Your own name!**\n\n# Bonus\n\nFind a combination of words that satisfy the criteria. For example, \"AlantRing\" in \"**Alan T**ur**ing**\".\n\nIn case of multiple combination of words that satisfy the criteria, find the word with the highest score and print that, where the score is sum of squares of length of all the constituent words\n\nFor example, in \"Alan Turing\",   \nscore of AlantRing is  5^2 + 4^2 = 41,  \nscore of AlAnting is 2^2 + 6^2 = 40,  \nscore of Alanin is 6^2 = 36\n\nand thus of the three, the first should be printed because of highest score.\n\n## Bonus Inputs\n\n    Donald Knuth\n    Alan Turing\n    Claude Shannon\n    Ada Lovelace\n    Haskell Curry\n    **Your own name!**\n\n# Finally\n\nHave a good challenge idea like /u/automata-door did?\n\nConsider submitting it to /r/dailyprogrammer_ideas", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "50hbtp", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_50hbtp", "score": 64, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/50hbtp/20160831_challenge_281_intermediate_dank_usernames/", "locked": false, "stickied": false, "created": 1472681000.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/50hbtp/20160831_challenge_281_intermediate_dank_usernames/", "author_flair_text": null, "quarantine": false, "title": "[2016-08-31] Challenge #281 [Intermediate] Dank usernames", "created_utc": 1472652200.0, "link_flair_text": null, "distinguished": null, "num_comments": 79, "visited": false, "num_reports": null, "ups": 64}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Numbers can be written in many kind of bases.&lt;/p&gt;\n\n&lt;p&gt;Normally we use &lt;code&gt;base 10&lt;/code&gt;, wich is the decimal notation, for our numbers. In modern computerscience we use &lt;code&gt;base 16&lt;/code&gt; (hexadecimal) a lot, and beneath that we have &lt;code&gt;base 2&lt;/code&gt; (binary).&lt;/p&gt;\n\n&lt;p&gt;Given a number you can&amp;#39;t tell what base it is, but you can tell what base it isn&amp;#39;t from. E.g.: &lt;code&gt;1&lt;/code&gt; exists in all bases, but &lt;code&gt;2&lt;/code&gt; does not exist in &lt;code&gt;base 2&lt;/code&gt;. It does exist in &lt;code&gt;base 3&lt;/code&gt; and so on.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;p&gt;You will be given a number and you have to print the smallest base possible to wich it can belong and it&amp;#39;s equivalent in &lt;code&gt;base 10&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;The numbers to test&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1\n21\nab3\nff\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;The smallest base it belongs to plus the value in &lt;code&gt;base 10&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;base 2 =&amp;gt; 1\nbase 3 =&amp;gt; 7\nbase 12 =&amp;gt; 1575\nbase 16 =&amp;gt; 255\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;For more info on numeral systems, you can start here &lt;a href=\"https://en.wikipedia.org/wiki/Numeral_system\"&gt;wiki&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For those new with bases. The letters translate to a higher value then &lt;code&gt;9&lt;/code&gt;, and because &lt;code&gt;10&lt;/code&gt; exists out of 2 digits, they replace it with a letter.&lt;/p&gt;\n\n&lt;p&gt;This is the translation you need for this challenge&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Digit&lt;/th&gt;\n&lt;th&gt;Value&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;a&lt;/td&gt;\n&lt;td&gt;10&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;b&lt;/td&gt;\n&lt;td&gt;11&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;c&lt;/td&gt;\n&lt;td&gt;12&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;d&lt;/td&gt;\n&lt;td&gt;13&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;e&lt;/td&gt;\n&lt;td&gt;14&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;f&lt;/td&gt;\n&lt;td&gt;15&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Print out all the decimal values for every base starting from the minimum till &lt;code&gt;base 16&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Input&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;21\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;base 3 =&amp;gt; 7\nbase 4 =&amp;gt; 9\nbase 5 =&amp;gt; 11\nbase 6 =&amp;gt; 13\nbase 7 =&amp;gt; 15\nbase 8 =&amp;gt; 17\nbase 9 =&amp;gt; 19\nbase 10 =&amp;gt; 21\nbase 11 =&amp;gt; 23\nbase 12 =&amp;gt; 25\nbase 13 =&amp;gt; 27\nbase 14 =&amp;gt; 29\nbase 15 =&amp;gt; 31\nbase 16 =&amp;gt; 33\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Bonus inputs:&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;1\n21\nab3\nff\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus 2&lt;/h1&gt;\n\n&lt;p&gt;Make sure your program handles &lt;code&gt;0&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;The minimum base for &lt;code&gt;0&lt;/code&gt; is &lt;code&gt;base 1&lt;/code&gt; and it&amp;#39;s value &lt;code&gt;0&lt;/code&gt;. As you might expect...&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nNumbers can be written in many kind of bases.\n\nNormally we use `base 10`, wich is the decimal notation, for our numbers. In modern computerscience we use `base 16` (hexadecimal) a lot, and beneath that we have `base 2` (binary).\n\nGiven a number you can't tell what base it is, but you can tell what base it isn't from. E.g.: `1` exists in all bases, but `2` does not exist in `base 2`. It does exist in `base 3` and so on.\n\n#Formal Inputs &amp; Outputs\n\nYou will be given a number and you have to print the smallest base possible to wich it can belong and it's equivalent in `base 10`\n\n##Input description\n\nThe numbers to test\n\n    1\n    21\n    ab3\n    ff\n\n##Output description\n\nThe smallest base it belongs to plus the value in `base 10`\n\n    base 2 =&gt; 1\n    base 3 =&gt; 7\n    base 12 =&gt; 1575\n    base 16 =&gt; 255\n\n#Notes/Hints\n\nFor more info on numeral systems, you can start here [wiki](https://en.wikipedia.org/wiki/Numeral_system)\n\nFor those new with bases. The letters translate to a higher value then `9`, and because `10` exists out of 2 digits, they replace it with a letter.\n\nThis is the translation you need for this challenge\n\nDigit | Value\n---|---\na | 10\nb | 11\nc | 12\nd | 13\ne | 14\nf | 15\n\n\n#Bonus\n\nPrint out all the decimal values for every base starting from the minimum till `base 16`.\n\n##Input\n\n    21\n\n##Output\n\n    base 3 =&gt; 7\n    base 4 =&gt; 9\n    base 5 =&gt; 11\n    base 6 =&gt; 13\n    base 7 =&gt; 15\n    base 8 =&gt; 17\n    base 9 =&gt; 19\n    base 10 =&gt; 21\n    base 11 =&gt; 23\n    base 12 =&gt; 25\n    base 13 =&gt; 27\n    base 14 =&gt; 29\n    base 15 =&gt; 31\n    base 16 =&gt; 33\n\n\n##Bonus inputs:\n\n    1\n    21\n    ab3\n    ff\n\n#Bonus 2\nMake sure your program handles `0`. \n\nThe minimum base for `0` is `base 1` and it's value `0`. As you might expect...\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "504rdh", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_504rdh", "score": 89, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1472479021.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/504rdh/20160829_challenge_281_easy_something_about_bases/", "locked": false, "stickied": false, "created": 1472502595.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/504rdh/20160829_challenge_281_easy_something_about_bases/", "author_flair_text": null, "quarantine": false, "title": "[2016-08-29] Challenge #281 [Easy] Something about bases", "created_utc": 1472473795.0, "link_flair_text": null, "distinguished": null, "num_comments": 125, "visited": false, "num_reports": null, "ups": 89}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Flow Free is a game that consists of an n*m grid with some cells that have a color (the other cells are initially empty). For every colored cell, there is exactly one other cell on the grid that has the same color -- there can&amp;#39;t be 3 cells with the same color, or a cell that is unique in its color.&lt;/p&gt;\n\n&lt;p&gt;The objective of the player is to connect all the matching colors in the grid, by making &amp;quot;pipes&amp;quot; between them, that go through empty cells.&lt;/p&gt;\n\n&lt;p&gt;The pipes must not cross or overlap, and they have to cover the whole board.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://i.imgur.com/xLQXz.jpg\"&gt;Here&lt;/a&gt;&amp;#39;s an example of a Flow Free puzzle (to the left) and its solution (right). For additional clarification, &lt;a href=\"https://www.youtube.com/watch?v=83g8pDQg_Ng\"&gt;Here&lt;/a&gt;&amp;#39;s somebody solving some puzzles.&lt;/p&gt;\n\n&lt;p&gt;Your objective is to write a program that, given a Flow Free puzzle, outputs its solution.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;p&gt;We will represent the positions of the grid using Cartesian coordinates: the upper leftmost cell is (0, 0), and the cell that is located n cells to the right of it and m cells underneath it, is called (n, m).&lt;/p&gt;\n\n&lt;h2&gt;Input Description&lt;/h2&gt;\n\n&lt;p&gt;The first line consists 3 numbers, &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;N&lt;/em&gt;, and &lt;em&gt;M&lt;/em&gt;, separated by space. &lt;em&gt;A&lt;/em&gt; is the number of colors, &lt;em&gt;N&lt;/em&gt; is the width of the grid and &lt;em&gt;M&lt;/em&gt; is its height.\nThe next &lt;em&gt;A&lt;/em&gt; lines specify the matching cells - each line contains two cartesian coordinates (for matching cells), separated by a space &lt;code&gt;(x1, y1) (x2, y2)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Example (for &lt;a href=\"http://i.imgur.com/xLQXz.jpg\"&gt;the puzzle&lt;/a&gt; that was previously given as an example):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;5 5 5\n(1, 0) (0, 3)\n(2, 0) (0, 4)\n(3, 0) (3, 4)\n(3, 1) (2, 2)\n(2, 4) (3, 3)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output Description&lt;/h2&gt;\n\n&lt;p&gt;The output consists of &lt;em&gt;A&lt;/em&gt; lines, each line is a sequence of some cartesian coordinates (separated by a space), that specifies the path of a pipe between two matching cells.&lt;/p&gt;\n\n&lt;p&gt;The first and last cells of an output line are the matching cells that were initially colored, everything between them consists of the cells of the pipe. The order of the output&amp;#39;s lines doesn&amp;#39;t matter - it doesn&amp;#39;t have to correspond to the input.&lt;/p&gt;\n\n&lt;p&gt;Possible example output (Again, the lines don&amp;#39;t have to be sorted in a certain way):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(2, 0) (2, 1) (1, 1) (1, 2) (1, 3) (1, 4) (0, 4)\n(1, 0) (0, 0) (0, 1) (0, 2) (0, 3)\n(3, 0) (4, 0) (4, 1) (4, 2) (4, 3) (4, 4) (3, 4)\n(2, 4) (2, 3) (3, 3)\n(3, 1) (3, 2) (2, 2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was suggested by &lt;a href=\"/u/Avnerium\"&gt;/u/Avnerium&lt;/a&gt;. If you have a challenge idea, please share it in &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and there&amp;#39;s a good chance we&amp;#39;ll use it.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "\n# Description\n\nFlow Free is a game that consists of an n*m grid with some cells that have a color (the other cells are initially empty). For every colored cell, there is exactly one other cell on the grid that has the same color -- there can't be 3 cells with the same color, or a cell that is unique in its color.\n\nThe objective of the player is to connect all the matching colors in the grid, by making \"pipes\" between them, that go through empty cells.\n\nThe pipes must not cross or overlap, and they have to cover the whole board.\n\n[Here](http://i.imgur.com/xLQXz.jpg)'s an example of a Flow Free puzzle (to the left) and its solution (right). For additional clarification, [Here](https://www.youtube.com/watch?v=83g8pDQg_Ng)'s somebody solving some puzzles.\n\nYour objective is to write a program that, given a Flow Free puzzle, outputs its solution.\n\n# Formal Inputs and Outputs\n\nWe will represent the positions of the grid using Cartesian coordinates: the upper leftmost cell is (0, 0), and the cell that is located n cells to the right of it and m cells underneath it, is called (n, m).\n\n## Input Description\n\nThe first line consists 3 numbers, *A*, *N*, and *M*, separated by space. *A* is the number of colors, *N* is the width of the grid and *M* is its height.\nThe next *A* lines specify the matching cells - each line contains two cartesian coordinates (for matching cells), separated by a space `(x1, y1) (x2, y2)`.\n\nExample (for [the puzzle](http://i.imgur.com/xLQXz.jpg) that was previously given as an example):\n\n    5 5 5\n    (1, 0) (0, 3)\n    (2, 0) (0, 4)\n    (3, 0) (3, 4)\n    (3, 1) (2, 2)\n    (2, 4) (3, 3)\n\n## Output Description\n\nThe output consists of *A* lines, each line is a sequence of some cartesian coordinates (separated by a space), that specifies the path of a pipe between two matching cells.\n\nThe first and last cells of an output line are the matching cells that were initially colored, everything between them consists of the cells of the pipe. The order of the output's lines doesn't matter - it doesn't have to correspond to the input.\n\nPossible example output (Again, the lines don't have to be sorted in a certain way):\n\n    (2, 0) (2, 1) (1, 1) (1, 2) (1, 3) (1, 4) (0, 4)\n    (1, 0) (0, 0) (0, 1) (0, 2) (0, 3)\n    (3, 0) (4, 0) (4, 1) (4, 2) (4, 3) (4, 4) (3, 4)\n    (2, 4) (2, 3) (3, 3)\n    (3, 1) (3, 2) (2, 2)\n\n# Credit\n\nThis challenge was suggested by /u/Avnerium. If you have a challenge idea, please share it in /r/dailyprogrammer_ideas and there's a good chance we'll use it.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4zog32", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_4zog32", "score": 86, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4zog32/20160826_challenge_280_hard_free_flow_solver/", "locked": false, "stickied": false, "created": 1472244918.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4zog32/20160826_challenge_280_hard_free_flow_solver/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-08-26] Challenge #280 [Hard] Free Flow Solver", "created_utc": 1472216118.0, "link_flair_text": null, "distinguished": null, "num_comments": 21, "visited": false, "num_reports": null, "ups": 86}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Anagrams, where you take the letters from one or more words and rearrange them to spell something else, are a fun word game. &lt;/p&gt;\n\n&lt;p&gt;In this challenge you&amp;#39;ll be asked to create anagrams from specific inputs. You should ignore capitalization as needed, and use only English language words. Note that because there are so many possibilities, there are no &amp;quot;right&amp;quot; answers so long as they&amp;#39;re valid English language words and proper anagrams. &lt;/p&gt;\n\n&lt;h1&gt;Example Input&lt;/h1&gt;\n\n&lt;p&gt;First you&amp;#39;ll be given an integer on a single line, this tells you how many lines to read. Then you&amp;#39;ll be given a word (or words) on &lt;em&gt;N&lt;/em&gt; lines to make anagrams for. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1\nField of dreams\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Example Output&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit the original word and one or more anagrams it developed. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Field of dreams -&amp;gt; Dads Offer Lime\nField of dreams -&amp;gt; Deaf Fold Miser\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;6\nDesperate\nRedditor\nDailyprogrammer\nSam likes to swim\nThe Morse Code\nHelp, someone stole my purse\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;English Wordlist&lt;/h1&gt;\n\n&lt;p&gt;Feel free to use the venerable &lt;a href=\"http://norvig.com/ngrams/enable1.txt\"&gt;http://norvig.com/ngrams/enable1.txt&lt;/a&gt; &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nAnagrams, where you take the letters from one or more words and rearrange them to spell something else, are a fun word game. \n\nIn this challenge you'll be asked to create anagrams from specific inputs. You should ignore capitalization as needed, and use only English language words. Note that because there are so many possibilities, there are no \"right\" answers so long as they're valid English language words and proper anagrams. \n\n# Example Input\n\nFirst you'll be given an integer on a single line, this tells you how many lines to read. Then you'll be given a word (or words) on *N* lines to make anagrams for. Example:\n\n    1\n    Field of dreams\n\n# Example Output \n\nYour program should emit the original word and one or more anagrams it developed. Example:\n\n    Field of dreams -&gt; Dads Offer Lime\n    Field of dreams -&gt; Deaf Fold Miser\n\n# Challenge Input\n\n    6\n    Desperate\n    Redditor\n    Dailyprogrammer\n    Sam likes to swim\n    The Morse Code\n    Help, someone stole my purse\n\n# English Wordlist\n\nFeel free to use the venerable http://norvig.com/ngrams/enable1.txt ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4zcly2", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_4zcly2", "score": 61, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1472050387.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4zcly2/20160824_challenge_280_intermediate_anagram_maker/", "locked": false, "stickied": false, "created": 1472074742.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4zcly2/20160824_challenge_280_intermediate_anagram_maker/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-08-24] Challenge #280 [Intermediate] Anagram Maker", "created_utc": 1472045942.0, "link_flair_text": null, "distinguished": null, "num_comments": 50, "visited": false, "num_reports": null, "ups": 61}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Oh, how cursed we are to have but 10 digits upon our fingers. Imagine the possibilities were we able to count to numbers beyond! But halt! With 10 digits upon our two appendages, 1024 unique combinations appear! But alas, counting in this manner is cumbersome, and counting to such a number beyond reason. Surely being able to count up to 100 would suffice!&lt;/p&gt;\n\n&lt;p&gt;You will be given inputs which correspond to the 10 digits of a pair of hands in the following format, where 1 means the finger is raised, and 0 means the finger is down.&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;&lt;strong&gt;LP&lt;/strong&gt;&lt;/th&gt;\n&lt;th&gt;&lt;strong&gt;LR&lt;/strong&gt;&lt;/th&gt;\n&lt;th&gt;&lt;strong&gt;LM&lt;/strong&gt;&lt;/th&gt;\n&lt;th&gt;&lt;strong&gt;LI&lt;/strong&gt;&lt;/th&gt;\n&lt;th&gt;&lt;strong&gt;LT&lt;/strong&gt;&lt;/th&gt;\n&lt;th&gt;&lt;strong&gt;RT&lt;/strong&gt;&lt;/th&gt;\n&lt;th&gt;&lt;strong&gt;RI&lt;/strong&gt;&lt;/th&gt;\n&lt;th&gt;&lt;strong&gt;RM&lt;/strong&gt;&lt;/th&gt;\n&lt;th&gt;&lt;strong&gt;RR&lt;/strong&gt;&lt;/th&gt;\n&lt;th&gt;&lt;strong&gt;RP&lt;/strong&gt;&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;pre&gt;&lt;code&gt;L = Left, R = Right, P = Pinky, R = Ring Finger, M = Middle Finger, I = Index Finger, T = Thumb\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your challenge is to take these inputs, and:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Determine if it is valid based on &lt;a href=\"http://www.wikihow.com/Count-to-99-on-Your-Fingers\"&gt;this counting scheme&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it is, then decode the inputs into the number represented by the digits on the hand.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;Formal Inputs and Outputs&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;0111011100 -&amp;gt; 37\n1010010000 -&amp;gt; Invalid\n0011101110 -&amp;gt; 73\n0000110000 -&amp;gt; 55\n1111110001 -&amp;gt; Invalid\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was submitted by &lt;a href=\"/u/abyssalheaven\"&gt;/u/abyssalheaven&lt;/a&gt;. Thank you! If you have any challenge ideas, please share them in &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt; and there&amp;#39;s a good chance we&amp;#39;ll use them. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nOh, how cursed we are to have but 10 digits upon our fingers. Imagine the possibilities were we able to count to numbers beyond! But halt! With 10 digits upon our two appendages, 1024 unique combinations appear! But alas, counting in this manner is cumbersome, and counting to such a number beyond reason. Surely being able to count up to 100 would suffice!\n\n\nYou will be given inputs which correspond to the 10 digits of a pair of hands in the following format, where 1 means the finger is raised, and 0 means the finger is down.\n\nExample:\n\n    **LP** | **LR** | **LM** | **LI** | **LT** |  **RT** | **RI** | **RM** | **RR** | **RP**\n    ---------|-----------|-----------|----------|-----------|-----------|----------|------------|-----------|----------\n    0 | 1 | 1 | 1 | 0 | 1 | 1| 1| 0| 0\n    \n    L = Left, R = Right, P = Pinky, R = Ring Finger, M = Middle Finger, I = Index Finger, T = Thumb\n\n\nYour challenge is to take these inputs, and:\n\n1. Determine if it is valid based on [this counting scheme](http://www.wikihow.com/Count-to-99-on-Your-Fingers). \n\n2. If it is, then decode the inputs into the number represented by the digits on the hand.\n\n# Formal Inputs and Outputs\n\n\n    0111011100 -&gt; 37\n    1010010000 -&gt; Invalid\n    0011101110 -&gt; 73\n    0000110000 -&gt; 55\n    1111110001 -&gt; Invalid\n\n# Credit\n\nThis challenge was submitted by /u/abyssalheaven. Thank you! If you have any challenge ideas, please share them in /r/dailyprogrammer_ideas and there's a good chance we'll use them. ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4z04vj", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_4z04vj", "score": 82, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4z04vj/20160822_challenge_280_easy_0_to_100_real_quick/", "locked": false, "stickied": false, "created": 1471895127.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4z04vj/20160822_challenge_280_easy_0_to_100_real_quick/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-08-22] Challenge #280 [Easy] 0 to 100, Real Quick", "created_utc": 1471866327.0, "link_flair_text": null, "distinguished": null, "num_comments": 169, "visited": false, "num_reports": null, "ups": 82}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description:&lt;/h1&gt;\n\n&lt;p&gt;Text reflow means to break up lines of text so that they fit within a certain width. It is useful in e.g. mobile browsers. When you zoom in on a web page the lines will become too long to fit the width of the screen, unless the text is broken up into shorter lines.&lt;/p&gt;\n\n&lt;h1&gt;Input:&lt;/h1&gt;\n\n&lt;p&gt;You will be given a text with a maximum line width of 80 characters.&lt;/p&gt;\n\n&lt;h1&gt;Output:&lt;/h1&gt;\n\n&lt;p&gt;Produce the same text with a maximum line width of 40 characters&lt;/p&gt;\n\n&lt;h1&gt;Challenge Input:&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;In the beginning God created the heavens and the earth. Now the earth was \nformless and empty, darkness was over the surface of the deep, and the Spirit of\nGod was hovering over the waters.\n\nAnd God said, &amp;quot;Let there be light,&amp;quot; and there was light. God saw that the light\nwas good, and he separated the light from the darkness. God called the light\n&amp;quot;day,&amp;quot; and the darkness he called &amp;quot;night.&amp;quot; And there was evening, and there was\nmorning - the first day.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Output:&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;In the beginning God created the heavens\nand the earth. Now the earth was\nformless and empty, darkness was over\nthe surface of the deep, and the Spirit\nof God was hovering over the waters.\n\nAnd God said, &amp;quot;Let there be light,&amp;quot; and\nthere was light. God saw that the light\nwas good, and he separated the light\nfrom the darkness. God called the light\n&amp;quot;day,&amp;quot; and the darkness he called\n&amp;quot;night.&amp;quot; And there was evening, and\nthere was morning - the first day.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonus:&lt;/h1&gt;\n\n&lt;p&gt;Let&amp;#39;s get rid of the jagged right margin of the text and make the output prettier. Output the text with full justification; Adjusting the word spacing so that the text is flush against both the left and the right margin.&lt;/p&gt;\n\n&lt;h1&gt;Bonus Output:&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;In the beginning God created the heavens\nand   the  earth.   Now  the  earth  was\nformless  and empty,  darkness was  over\nthe  surface of the deep, and the Spirit\nof  God was  hovering over  the  waters.\n\nAnd  God said, &amp;quot;Let there be light,&amp;quot; and\nthere  was light. God saw that the light\nwas  good, and  he separated  the  light\nfrom  the darkness. God called the light\n&amp;quot;day,&amp;quot;   and  the   darkness  he  called\n&amp;quot;night.&amp;quot;  And  there  was  evening,  and\nthere  was  morning  -  the  first  day.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;This challenge is posted by &lt;a href=\"/u/slampropp\"&gt;/u/slampropp&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description:\n\nText reflow means to break up lines of text so that they fit within a certain width. It is useful in e.g. mobile browsers. When you zoom in on a web page the lines will become too long to fit the width of the screen, unless the text is broken up into shorter lines.\n\n\n#Input:\n\nYou will be given a text with a maximum line width of 80 characters.\n\n\n#Output:\n\nProduce the same text with a maximum line width of 40 characters\n\n\n#Challenge Input:\n\n    In the beginning God created the heavens and the earth. Now the earth was \n    formless and empty, darkness was over the surface of the deep, and the Spirit of\n    God was hovering over the waters.\n\n    And God said, \"Let there be light,\" and there was light. God saw that the light\n    was good, and he separated the light from the darkness. God called the light\n    \"day,\" and the darkness he called \"night.\" And there was evening, and there was\n    morning - the first day.\n\n\n#Challenge Output:\n\n    In the beginning God created the heavens\n    and the earth. Now the earth was\n    formless and empty, darkness was over\n    the surface of the deep, and the Spirit\n    of God was hovering over the waters.\n\n    And God said, \"Let there be light,\" and\n    there was light. God saw that the light\n    was good, and he separated the light\n    from the darkness. God called the light\n    \"day,\" and the darkness he called\n    \"night.\" And there was evening, and\n    there was morning - the first day.\n\n    \n#Bonus:\n\nLet's get rid of the jagged right margin of the text and make the output prettier. Output the text with full justification; Adjusting the word spacing so that the text is flush against both the left and the right margin.\n\n\n#Bonus Output:\n\n    In the beginning God created the heavens\n    and   the  earth.   Now  the  earth  was\n    formless  and empty,  darkness was  over\n    the  surface of the deep, and the Spirit\n    of  God was  hovering over  the  waters.\n\n    And  God said, \"Let there be light,\" and\n    there  was light. God saw that the light\n    was  good, and  he separated  the  light\n    from  the darkness. God called the light\n    \"day,\"   and  the   darkness  he  called\n    \"night.\"  And  there  was  evening,  and\n    there  was  morning  -  the  first  day.\n\n\n#Finally\n\nThis challenge is posted by /u/slampropp\n\nAlso have a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4ybbcz", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_4ybbcz", "score": 79, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4ybbcz/20160818_challenge_279_intermediate_text_reflow/", "locked": false, "stickied": false, "created": 1471541170.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4ybbcz/20160818_challenge_279_intermediate_text_reflow/", "author_flair_text": null, "quarantine": false, "title": "[2016-08-18] Challenge #279 [Intermediate] Text Reflow", "created_utc": 1471512370.0, "link_flair_text": null, "distinguished": null, "num_comments": 79, "visited": false, "num_reports": null, "ups": 79}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;You are trapped at uninhabited island only with your laptop. Still you don&amp;#39;t want your significant other to worry about you, so you are going to send a message in a bottle with your picture or at least a couple of words from you (sure, you could just write down the words, but that would be less fun). You&amp;#39;re going to use uuencoding for that.&lt;/p&gt;\n\n&lt;p&gt;Uuencoding is a form of binary-to-text encoding, which uses only symbols from 32-95 diapason, which means all symbols used in the encoding are printable.&lt;/p&gt;\n\n&lt;h1&gt;Description of encoding&lt;/h1&gt;\n\n&lt;p&gt;A uuencoded file starts with a header line of the form:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;begin &amp;lt;mode&amp;gt; &amp;lt;file&amp;gt;&amp;lt;newline&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;lt;mode&amp;gt; is the file&amp;#39;s Unix file permissions as three octal digits (e.g. 644, 744). For Windows 644 is always used.&lt;/p&gt;\n\n&lt;p&gt;&amp;lt;file&amp;gt; is the file name to be used when recreating the binary data.&lt;/p&gt;\n\n&lt;p&gt;&amp;lt;newline&amp;gt; signifies a newline character, used to terminate each line.&lt;/p&gt;\n\n&lt;p&gt;Each data line uses the format:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;length character&amp;gt;&amp;lt;formatted characters&amp;gt;&amp;lt;newline&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;lt;length character&amp;gt; is a character indicating the number of data bytes which have been encoded on that line. This is an ASCII character determined by adding 32 to the actual byte count, with the sole exception of a grave accent &amp;quot;`&amp;quot; (ASCII code 96) signifying zero bytes. All data lines except the last (if the data was not divisible by 45), have 45 bytes of encoded data (60 characters after encoding). Therefore, the vast majority of length values is &amp;#39;M&amp;#39;, (32 + 45 = ASCII code 77 or &amp;quot;M&amp;quot;).&lt;/p&gt;\n\n&lt;p&gt;&amp;lt;formatted characters&amp;gt; are encoded characters.&lt;/p&gt;\n\n&lt;p&gt;The mechanism of uuencoding repeats the following for every 3 bytes (if there are less than 3 bytes left, trailing 0 are added):&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Start with 3 bytes from the source, 24 bits in total.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Split into 4 6-bit groupings, each representing a value in the range 0 to 63: bits (00-05), (06-11), (12-17) and (18-23).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Add 32 to each of the values. With the addition of 32 this means that the possible results can be between 32 (&amp;quot; &amp;quot; space) and 95 (&amp;quot;_&amp;quot; underline). 96 (&amp;quot;`&amp;quot; grave accent) as the &amp;quot;special character&amp;quot; is a logical extension of this range.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Output the ASCII equivalent of these numbers.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;For example, we want to encode a word &amp;quot;Cat&amp;quot;. ASCII values for C,a,t are 67,97,116, or  &lt;code&gt;010000110110000101110100&lt;/code&gt; in binary. After dividing into four groups, we get 010000 110110 000101 110100, which is 16,54,5,52 in decimal. Adding 32 to this values and encoding back in ASCII, the final result is &lt;code&gt;0V%T&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The file ends with two lines:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;`&amp;lt;newline&amp;gt;\nend&amp;lt;newline&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input&lt;/h2&gt;\n\n&lt;p&gt;a byte array or string.&lt;/p&gt;\n\n&lt;h2&gt;Output&lt;/h2&gt;\n\n&lt;p&gt;a string containing uuencoded input.&lt;/p&gt;\n\n&lt;h1&gt;Examples&lt;/h1&gt;\n\n&lt;p&gt;Input: Cat&lt;/p&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;begin 644 cat.txt\n#0V%T\n`\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Input:\nI feel very strongly about you doing duty. Would you give me a little more documentation about your reading in French? I am glad you are happy \u2014 but I never believe much in happiness. I never believe in misery either. Those are things you see on the stage or the screen or the printed pages, they never really happen to you in life.&lt;/p&gt;\n\n&lt;p&gt;Output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;begin 644 file.txt\nM22!F965L(&amp;#39;9E&amp;lt;GD@&amp;lt;W1R;VYG;&amp;#39;D@86)O=70@&amp;gt;6]U(&amp;amp;1O:6YG(&amp;amp;1U=&amp;#39;DN(%=O\nM=6QD(&amp;#39;EO=2!G:79E(&amp;amp;UE(&amp;amp;$@;&amp;amp;ET=&amp;amp;QE(&amp;amp;UO&amp;lt;F4@9&amp;amp;]C=6UE;G1A=&amp;amp;EO;B!A\nM8F]U=&amp;quot;!Y;W5R(&amp;#39;)E861I;F&amp;lt;@:6X@1G)E;F-H/R!)(&amp;amp;%M(&amp;amp;=L860@&amp;gt;6]U(&amp;amp;%R\nM92!H87!P&amp;gt;2#B@)0@8G5T($D@;F5V97(@8F5L:65V92!M=6-H(&amp;amp;EN(&amp;amp;AA&amp;lt;&amp;#39;!I\nM;F5S&amp;lt;RX@22!N979E&amp;lt;B!B96QI979E(&amp;amp;EN(&amp;amp;UI&amp;lt;V5R&amp;gt;2!E:71H97(N(%1H;W-E\nM(&amp;amp;%R92!T:&amp;amp;EN9W,@&amp;gt;6]U(&amp;#39;-E92!O;B!T:&amp;amp;4@&amp;lt;W1A9V4@;W(@=&amp;amp;AE(&amp;#39;-C&amp;lt;F5E\nM;B!O&amp;lt;B!T:&amp;amp;4@&amp;lt;&amp;#39;)I;G1E9&amp;quot;!P86=E&amp;lt;RP@=&amp;amp;AE&amp;gt;2!N979E&amp;lt;B!R96%L;&amp;#39;D@:&amp;amp;%P\n3&amp;lt;&amp;amp;5N(&amp;#39;1O(&amp;#39;EO=2!I;B!L:69E+C P\n`\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Bonuses&lt;/h1&gt;\n\n&lt;h2&gt;Bonus 1&lt;/h2&gt;\n\n&lt;p&gt;Write uudecoder, which decodes uuencoded input back to a byte array or string&lt;/p&gt;\n\n&lt;h2&gt;Bonus 2&lt;/h2&gt;\n\n&lt;p&gt;Write encoder for files as well.&lt;/p&gt;\n\n&lt;h2&gt;Bonus 3&lt;/h2&gt;\n\n&lt;p&gt;Make encoding parallel.&lt;/p&gt;\n\n&lt;h1&gt;Further Reading&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://en.wikipedia.org/wiki/Binary-to-text_encoding\"&gt;Binary-to-text encoding&lt;/a&gt; on Wikipedia.&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;This challenge is posted by &lt;a href=\"/u/EvgeniyZh\"&gt;/u/EvgeniyZh&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "You are trapped at uninhabited island only with your laptop. Still you don't want your significant other to worry about you, so you are going to send a message in a bottle with your picture or at least a couple of words from you (sure, you could just write down the words, but that would be less fun). You're going to use uuencoding for that.\n\nUuencoding is a form of binary-to-text encoding, which uses only symbols from 32-95 diapason, which means all symbols used in the encoding are printable.\n\n#Description of encoding\n\nA uuencoded file starts with a header line of the form:\n\n    begin &lt;mode&gt; &lt;file&gt;&lt;newline&gt;\n\n&lt;mode&gt; is the file's Unix file permissions as three octal digits (e.g. 644, 744). For Windows 644 is always used.\n\n&lt;file&gt; is the file name to be used when recreating the binary data.\n\n&lt;newline&gt; signifies a newline character, used to terminate each line.\n\nEach data line uses the format:\n\n    &lt;length character&gt;&lt;formatted characters&gt;&lt;newline&gt;\n\n&lt;length character&gt; is a character indicating the number of data bytes which have been encoded on that line. This is an ASCII character determined by adding 32 to the actual byte count, with the sole exception of a grave accent \"`\" (ASCII code 96) signifying zero bytes. All data lines except the last (if the data was not divisible by 45), have 45 bytes of encoded data (60 characters after encoding). Therefore, the vast majority of length values is 'M', (32 + 45 = ASCII code 77 or \"M\").\n\n\n&lt;formatted characters&gt; are encoded characters.\n\nThe mechanism of uuencoding repeats the following for every 3 bytes (if there are less than 3 bytes left, trailing 0 are added):\n\n1. Start with 3 bytes from the source, 24 bits in total.\n\n2. Split into 4 6-bit groupings, each representing a value in the range 0 to 63: bits (00-05), (06-11), (12-17) and (18-23).\n\n3. Add 32 to each of the values. With the addition of 32 this means that the possible results can be between 32 (\" \" space) and 95 (\"_\" underline). 96 (\"`\" grave accent) as the \"special character\" is a logical extension of this range.\n\n4. Output the ASCII equivalent of these numbers.\n\n\nFor example, we want to encode a word \"Cat\". ASCII values for C,a,t are 67,97,116, or  `010000110110000101110100` in binary. After dividing into four groups, we get 010000 110110 000101 110100, which is 16,54,5,52 in decimal. Adding 32 to this values and encoding back in ASCII, the final result is `0V%T`.\n\nThe file ends with two lines:\n\n    `&lt;newline&gt;\n    end&lt;newline&gt;\n#Formal Inputs &amp; Outputs\n##Input\na byte array or string.\n##Output\na string containing uuencoded input.\n\n#Examples\nInput: Cat\n\nOutput:\n \n    begin 644 cat.txt\n    #0V%T\n    `\n    end\n\nInput:\nI feel very strongly about you doing duty. Would you give me a little more documentation about your reading in French? I am glad you are happy \u2014 but I never believe much in happiness. I never believe in misery either. Those are things you see on the stage or the screen or the printed pages, they never really happen to you in life.\n\n\nOutput:\n\n    begin 644 file.txt\n    M22!F965L('9E&lt;GD@&lt;W1R;VYG;'D@86)O=70@&gt;6]U(&amp;1O:6YG(&amp;1U='DN(%=O\n    M=6QD('EO=2!G:79E(&amp;UE(&amp;$@;&amp;ET=&amp;QE(&amp;UO&lt;F4@9&amp;]C=6UE;G1A=&amp;EO;B!A\n    M8F]U=\"!Y;W5R(')E861I;F&lt;@:6X@1G)E;F-H/R!)(&amp;%M(&amp;=L860@&gt;6]U(&amp;%R\n    M92!H87!P&gt;2#B@)0@8G5T($D@;F5V97(@8F5L:65V92!M=6-H(&amp;EN(&amp;AA&lt;'!I\n    M;F5S&lt;RX@22!N979E&lt;B!B96QI979E(&amp;EN(&amp;UI&lt;V5R&gt;2!E:71H97(N(%1H;W-E\n    M(&amp;%R92!T:&amp;EN9W,@&gt;6]U('-E92!O;B!T:&amp;4@&lt;W1A9V4@;W(@=&amp;AE('-C&lt;F5E\n    M;B!O&lt;B!T:&amp;4@&lt;')I;G1E9\"!P86=E&lt;RP@=&amp;AE&gt;2!N979E&lt;B!R96%L;'D@:&amp;%P\n    3&lt;&amp;5N('1O('EO=2!I;B!L:69E+C P\n    `\n    end\n\n#Bonuses\n##Bonus 1\nWrite uudecoder, which decodes uuencoded input back to a byte array or string\n##Bonus 2\nWrite encoder for files as well.\n##Bonus 3\nMake encoding parallel.\n#Further Reading\n[Binary-to-text encoding](https://en.wikipedia.org/wiki/Binary-to-text_encoding) on Wikipedia.\n\n#Finally\n\nThis challenge is posted by /u/EvgeniyZh\n\nAlso have a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4xy6i1", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_4xy6i1", "score": 86, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4xy6i1/20160816_challenge_279_easy_uuencoding/", "locked": false, "stickied": false, "created": 1471358988.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4xy6i1/20160816_challenge_279_easy_uuencoding/", "author_flair_text": null, "quarantine": false, "title": "[2016-08-16] Challenge #279 [Easy] Uuencoding", "created_utc": 1471330188.0, "link_flair_text": null, "distinguished": null, "num_comments": 66, "visited": false, "num_reports": null, "ups": 86}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This week&amp;#39;s challenges are functional approaches to data interleaving.  This is usually done in the context of data being code or other machine (xml) representation.  Part 2 bonuses will be posted later in the week.&lt;/p&gt;\n\n&lt;h1&gt;input of 2 arrays&lt;/h1&gt;\n\n&lt;p&gt;First array (or scalar) argument gets interleaved into 2nd array.  :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; insWeave([11]. [0, 1, 2, 3])  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;0 , 11 , 1 , 11 , 2 , 11 , 3&lt;/p&gt;\n\n&lt;p&gt;If first array is shorter than 2nd, it is extended cyclically&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; insWeave([11,12]. [0, 1, 2, 3])  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;0 , 11 , 1  , 12 , 2 , 11 , 3&lt;/p&gt;\n\n&lt;p&gt;If the 2nd array is shorter than the first then the simplest option is to cut off the first array so that the 2 arrays have equal length.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; insWeave([11,12,13]. [0, 1])  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;0 , 11 , 1&lt;/p&gt;\n\n&lt;h1&gt;option 2:  shorter 2nd array is grouped by 2 and has items inserted in each pair. (strings are arrays of char)&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt; insBracket (&amp;#39;abc&amp;#39;  , &amp;#39;()&amp;#39; )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(a)&lt;br/&gt;\n(b)&lt;br/&gt;\n(c)  &lt;/p&gt;\n\n&lt;h1&gt;string input&lt;/h1&gt;\n\n&lt;p&gt;input format has each string within an array on its own line.  A blank line separates the 2 arrays.  A single string represents a character array.  The first line of input indicates &amp;quot;Bracket&amp;quot; or &amp;quot;Weave&amp;quot; to indicate use of the 2 alternate functions.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;input:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Bracket&lt;br/&gt;\n+-  &lt;/p&gt;\n\n&lt;p&gt;234567  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;output:&lt;/strong&gt;&lt;br/&gt;\n2+3&lt;br/&gt;\n4-5&lt;br/&gt;\n6+7  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;input:&lt;/strong&gt;&lt;br/&gt;\nBracket&lt;br/&gt;\n2+3&lt;br/&gt;\n4-5&lt;br/&gt;\n6+7  &lt;/p&gt;\n\n&lt;p&gt;()&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;output:&lt;/strong&gt;&lt;br/&gt;\n(2+3)&lt;br/&gt;\n(4-5)&lt;br/&gt;\n(6+7)  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;input:&lt;/strong&gt;&lt;br/&gt;\nWeave&lt;br/&gt;\n*&lt;/p&gt;\n\n&lt;p&gt;(2+3)&lt;br/&gt;\n(4-5)&lt;br/&gt;\n(6+7)  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;output:&lt;/strong&gt;&lt;br/&gt;\n(2+3)&lt;br/&gt;\n*&lt;br/&gt;\n(4-5)&lt;br/&gt;\n*&lt;br/&gt;\n(6+7)  &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "This week's challenges are functional approaches to data interleaving.  This is usually done in the context of data being code or other machine (xml) representation.  Part 2 bonuses will be posted later in the week.\n\n# input of 2 arrays\n\nFirst array (or scalar) argument gets interleaved into 2nd array.  :\n\n     insWeave([11]. [0, 1, 2, 3])  \n0 , 11 , 1 , 11 , 2 , 11 , 3\n\nIf first array is shorter than 2nd, it is extended cyclically\n\n     insWeave([11,12]. [0, 1, 2, 3])  \n0 , 11 , 1  , 12 , 2 , 11 , 3\n\nIf the 2nd array is shorter than the first then the simplest option is to cut off the first array so that the 2 arrays have equal length.\n\n     insWeave([11,12,13]. [0, 1])  \n0 , 11 , 1\n\n# option 2:  shorter 2nd array is grouped by 2 and has items inserted in each pair. (strings are arrays of char)\n\n     insBracket ('abc'  , '()' )\n(a)  \n(b)  \n(c)  \n\n\n# string input\n\ninput format has each string within an array on its own line.  A blank line separates the 2 arrays.  A single string represents a character array.  The first line of input indicates \"Bracket\" or \"Weave\" to indicate use of the 2 alternate functions.\n\n**input:**\n\nBracket  \n+-  \n\n234567  \n\n**output:**  \n2+3  \n4-5  \n6+7  \n\n**input:**  \nBracket  \n2+3  \n4-5  \n6+7  \n\n()\n\n\n**output:**  \n(2+3)  \n(4-5)  \n(6+7)  \n\n**input:**  \nWeave  \n*\n\n(2+3)  \n(4-5)  \n(6+7)  \n\n**output:**  \n(2+3)  \n*    \n(4-5)  \n*     \n(6+7)  \n\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4wqzph", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Godspiral", "media": null, "name": "t3_4wqzph", "score": 47, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1470681760.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4wqzph/20160808_challenge_278_easymed_weave_insert_part_1/", "locked": false, "stickied": false, "created": 1470702462.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4wqzph/20160808_challenge_278_easymed_weave_insert_part_1/", "author_flair_text": "3 3", "quarantine": false, "title": "[2016-08-08] Challenge #278 [Easy/Med] Weave insert Part 1", "created_utc": 1470673662.0, "link_flair_text": null, "distinguished": null, "num_comments": 71, "visited": false, "num_reports": null, "ups": 47}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;We are going to create a mini game. \nI&amp;#39;m going post updates with ideas, if you guys have them.&lt;/p&gt;\n\n&lt;p&gt;The goal of the game is to escape a maze and not get eaten by the trolls.&lt;/p&gt;\n\n&lt;h1&gt;Phases of the game&lt;/h1&gt;\n\n&lt;h2&gt;Phase 1&lt;/h2&gt;\n\n&lt;p&gt;Create your character and make it moveable.\nYou can use this amazing maze (see what I did there?) or create one yourself.\nIf you are going to use ASCII for the game, I suggest you use &lt;code&gt;&amp;lt;&amp;gt;v^&lt;/code&gt; for your character since direction becomes important.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#########################################################################\n#   #               #               #           #                   #   #\n#   #   #########   #   #####   #########   #####   #####   #####   #   #\n#               #       #   #           #           #   #   #       #   #\n#########   #   #########   #########   #####   #   #   #   #########   #\n#       #   #               #           #   #   #   #   #           #   #\n#   #   #############   #   #   #########   #####   #   #########   #   #\n#   #               #   #   #       #           #           #       #   #\n#   #############   #####   #####   #   #####   #########   #   #####   #\n#           #       #   #       #   #       #           #   #           #\n#   #####   #####   #   #####   #   #########   #   #   #   #############\n#       #       #   #   #       #       #       #   #   #       #       #\n#############   #   #   #   #########   #   #####   #   #####   #####   #\n#           #   #           #       #   #       #   #       #           #\n#   #####   #   #########   #####   #   #####   #####   #############   #\n#   #       #           #           #       #   #   #               #   #\n#   #   #########   #   #####   #########   #   #   #############   #   #\n#   #           #   #   #   #   #           #               #   #       #\n#   #########   #   #   #   #####   #########   #########   #   #########\n#   #       #   #   #           #           #   #       #               #\n#   #   #####   #####   #####   #########   #####   #   #########   #   #\n#   #                   #           #               #               #   #\n# X #####################################################################\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Small corridor version, thanks to &lt;a href=\"/u/rakkar16\"&gt;/u/rakkar16&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#####################################\n# #       #       #     #         # #\n# # ##### # ### ##### ### ### ### # #\n#       #   # #     #     # # #   # #\n##### # ##### ##### ### # # # ##### #\n#   # #       #     # # # # #     # #\n# # ####### # # ##### ### # ##### # #\n# #       # # #   #     #     #   # #\n# ####### ### ### # ### ##### # ### #\n#     #   # #   # #   #     # #     #\n# ### ### # ### # ##### # # # #######\n#   #   # # #   #   #   # # #   #   #\n####### # # # ##### # ### # ### ### #\n#     # #     #   # #   # #   #     #\n# ### # ##### ### # ### ### ####### #\n# #   #     #     #   # # #       # #\n# # ##### # ### ##### # # ####### # #\n# #     # # # # #     #       # #   #\n# ##### # # # ### ##### ##### # #####\n# #   # # #     #     # #   #       #\n# # ### ### ### ##### ### # ##### # #\n# #         #     #       #       # #\n#X###################################\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Place the character in a random spot and navigate it to the exit. &lt;code&gt;X&lt;/code&gt; marks the exit.&lt;/p&gt;\n\n&lt;h2&gt;Phase 2&lt;/h2&gt;\n\n&lt;p&gt;We have a more powerfull character now. He can push blocks that are in front of him.\nHe can only push blocks into an empty space, not into another block.&lt;/p&gt;\n\n&lt;p&gt;e.g.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Can push\n\n#   #     \n# &amp;gt; #   ##\n#   #        \n\nCan&amp;#39;t push\n\n#   #     \n# &amp;gt; #####\n#   #   \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Phase 3&lt;/h2&gt;\n\n&lt;p&gt;Let&amp;#39;s add some trolls. Place trolls at random spots and let them navigate to you character.\nYou can avoid the trolls by pushing blocks. &lt;/p&gt;\n\n&lt;p&gt;The trolls should move a block when you move a block, so it is turnbased.&lt;/p&gt;\n\n&lt;h2&gt;Phase 4&lt;/h2&gt;\n\n&lt;p&gt;Generate your own maze.&lt;/p&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;Each movement is 1 turn. So turning your character spends 1 turn&lt;/p&gt;\n\n&lt;p&gt;I propose to use ASCII for the game. \nBut if you want to use a framework with images, go ahead. If you do it in 3D, that is also fine.&lt;/p&gt;\n\n&lt;p&gt;You can use pathfinding for the trolls, but let&amp;#39;s be honest, they are trolls. They should not be the brightest of them all.&lt;/p&gt;\n\n&lt;p&gt;Some usefull links:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://en.wikipedia.org/wiki/Maze_generation_algorithm\"&gt;https://en.wikipedia.org/wiki/Maze_generation_algorithm&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=\"http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap\"&gt;http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=\"https://en.wikipedia.org/wiki/Pathfinding\"&gt;https://en.wikipedia.org/wiki/Pathfinding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;a href=\"http://theory.stanford.edu/%7Eamitp/GameProgramming/AStarComparison.html\"&gt;http://theory.stanford.edu/~amitp/GameProgramming/AStarComparison.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Bonuses don&amp;#39;t need to be done in any specific order&lt;/p&gt;\n\n&lt;h2&gt;Bonus 1 by &lt;a href=\"/u/JaumeGreen\"&gt;/u/JaumeGreen&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;Make the trolls crushable. When you move a block on a troll, it is dead/crushed/pancaked.&lt;/p&gt;\n\n&lt;h2&gt;Bonus 2&lt;/h2&gt;\n\n&lt;p&gt;Make it real time. You&amp;#39;ll have to see what pacing of the trolls are doable.&lt;/p&gt;\n\n&lt;h2&gt;Bonus 3 by &lt;a href=\"/u/Dikaiarchos\"&gt;/u/Dikaiarchos&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;Create tunnels to traverse the maze in a more complicated way.&lt;/p&gt;\n\n&lt;h2&gt;Bonus 4 by &lt;a href=\"/u/Dikaiarchos\"&gt;/u/Dikaiarchos&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;Create a perfect maze algorithm (no loops to walk trough). This does makes the game a lot harder...&lt;/p&gt;\n\n&lt;h2&gt;Bonus 5 by &lt;a href=\"/u/gandalfx\"&gt;/u/gandalfx&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;Instead of using &lt;code&gt;#&lt;/code&gt; as a wall piece, you could use &lt;a href=\"https://en.wikipedia.org/wiki/Box-drawing_character\"&gt;UTF-8 boxes&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Bonus 6 by &lt;a href=\"/u/chunes\"&gt;/u/chunes&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;Add a limited sight for the player, so the player has to navigate without seeing the complete maze&lt;/p&gt;\n\n&lt;h2&gt;Bonus 7 by &lt;a href=\"/u/GentlemanGallimaufry\"&gt;/u/GentlemanGallimaufry&lt;/a&gt;&lt;/h2&gt;\n\n&lt;p&gt;When moving blocks, you have a chance that you block yourself from the exit.\nSo when this happens you should give a game over message.&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nWe are going to create a mini game. \nI'm going post updates with ideas, if you guys have them.\n\nThe goal of the game is to escape a maze and not get eaten by the trolls.\n\n#Phases of the game\n\n##Phase 1\nCreate your character and make it moveable.\nYou can use this amazing maze (see what I did there?) or create one yourself.\nIf you are going to use ASCII for the game, I suggest you use `&lt;&gt;v^` for your character since direction becomes important.\n\n    #########################################################################\n    #   #               #               #           #                   #   #\n    #   #   #########   #   #####   #########   #####   #####   #####   #   #\n    #               #       #   #           #           #   #   #       #   #\n    #########   #   #########   #########   #####   #   #   #   #########   #\n    #       #   #               #           #   #   #   #   #           #   #\n    #   #   #############   #   #   #########   #####   #   #########   #   #\n    #   #               #   #   #       #           #           #       #   #\n    #   #############   #####   #####   #   #####   #########   #   #####   #\n    #           #       #   #       #   #       #           #   #           #\n    #   #####   #####   #   #####   #   #########   #   #   #   #############\n    #       #       #   #   #       #       #       #   #   #       #       #\n    #############   #   #   #   #########   #   #####   #   #####   #####   #\n    #           #   #           #       #   #       #   #       #           #\n    #   #####   #   #########   #####   #   #####   #####   #############   #\n    #   #       #           #           #       #   #   #               #   #\n    #   #   #########   #   #####   #########   #   #   #############   #   #\n    #   #           #   #   #   #   #           #               #   #       #\n    #   #########   #   #   #   #####   #########   #########   #   #########\n    #   #       #   #   #           #           #   #       #               #\n    #   #   #####   #####   #####   #########   #####   #   #########   #   #\n    #   #                   #           #               #               #   #\n    # X #####################################################################\n\nSmall corridor version, thanks to /u/rakkar16\n\n    #####################################\n    # #       #       #     #         # #\n    # # ##### # ### ##### ### ### ### # #\n    #       #   # #     #     # # #   # #\n    ##### # ##### ##### ### # # # ##### #\n    #   # #       #     # # # # #     # #\n    # # ####### # # ##### ### # ##### # #\n    # #       # # #   #     #     #   # #\n    # ####### ### ### # ### ##### # ### #\n    #     #   # #   # #   #     # #     #\n    # ### ### # ### # ##### # # # #######\n    #   #   # # #   #   #   # # #   #   #\n    ####### # # # ##### # ### # ### ### #\n    #     # #     #   # #   # #   #     #\n    # ### # ##### ### # ### ### ####### #\n    # #   #     #     #   # # #       # #\n    # # ##### # ### ##### # # ####### # #\n    # #     # # # # #     #       # #   #\n    # ##### # # # ### ##### ##### # #####\n    # #   # # #     #     # #   #       #\n    # # ### ### ### ##### ### # ##### # #\n    # #         #     #       #       # #\n    #X###################################\n\nPlace the character in a random spot and navigate it to the exit. `X` marks the exit.\n\n##Phase 2\n\nWe have a more powerfull character now. He can push blocks that are in front of him.\nHe can only push blocks into an empty space, not into another block.\n\ne.g.\n\n    Can push\n\n    #   #     \n    # &gt; #   ##\n    #   #        \n\n    Can't push\n    \n    #   #     \n    # &gt; #####\n    #   #   \n\n##Phase 3\n\nLet's add some trolls. Place trolls at random spots and let them navigate to you character.\nYou can avoid the trolls by pushing blocks. \n\nThe trolls should move a block when you move a block, so it is turnbased.\n\n##Phase 4\nGenerate your own maze.\n\n#Notes/Hints\n\nEach movement is 1 turn. So turning your character spends 1 turn\n\nI propose to use ASCII for the game. \nBut if you want to use a framework with images, go ahead. If you do it in 3D, that is also fine.\n\nYou can use pathfinding for the trolls, but let's be honest, they are trolls. They should not be the brightest of them all.\n\nSome usefull links:\n\n- https://en.wikipedia.org/wiki/Maze_generation_algorithm\n- http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap\n\n- https://en.wikipedia.org/wiki/Pathfinding\n- http://theory.stanford.edu/~amitp/GameProgramming/AStarComparison.html\n\n#Bonus\n\nBonuses don't need to be done in any specific order\n\n##Bonus 1 by /u/JaumeGreen\n\nMake the trolls crushable. When you move a block on a troll, it is dead/crushed/pancaked.\n\n##Bonus 2\n\nMake it real time. You'll have to see what pacing of the trolls are doable.\n\n##Bonus 3 by /u/Dikaiarchos\n\nCreate tunnels to traverse the maze in a more complicated way.\n\n##Bonus 4 by /u/Dikaiarchos\n\nCreate a perfect maze algorithm (no loops to walk trough). This does makes the game a lot harder...\n\n##Bonus 5 by /u/gandalfx\n\nInstead of using `#` as a wall piece, you could use [UTF-8 boxes](https://en.wikipedia.org/wiki/Box-drawing_character)\n\n##Bonus 6 by /u/chunes\n\nAdd a limited sight for the player, so the player has to navigate without seeing the complete maze\n\n##Bonus 7 by /u/GentlemanGallimaufry\n\nWhen moving blocks, you have a chance that you block yourself from the exit.\nSo when this happens you should give a game over message.\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4vrb8n", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_4vrb8n", "score": 126, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1470380492.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4vrb8n/weekly_25_escape_the_trolls/", "locked": false, "stickied": false, "created": 1470151735.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4vrb8n/weekly_25_escape_the_trolls/", "author_flair_text": null, "quarantine": false, "title": "[Weekly #25] Escape the trolls", "created_utc": 1470122935.0, "link_flair_text": null, "distinguished": null, "num_comments": 44, "visited": false, "num_reports": null, "ups": 126}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Announcement&lt;/h1&gt;\n\n&lt;p&gt;Since a lot of the people are on holidays, we are giving only one challenge this week. But it will be a larger one.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Announcement\n\nSince a lot of the people are on holidays, we are giving only one challenge this week. But it will be a larger one.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4vr831", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_4vr831", "score": 16, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4vr831/ann_only_one_challenge_this_week/", "locked": false, "stickied": false, "created": 1470150035.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4vr831/ann_only_one_challenge_this_week/", "author_flair_text": null, "quarantine": false, "title": "[ANN] Only one challenge this week", "created_utc": 1470121235.0, "link_flair_text": null, "distinguished": null, "num_comments": 3, "visited": false, "num_reports": null, "ups": 16}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;You\u2019re making a music video for an acid rock band. Far out man! Of course they want visual effects with fractals, because they\u2019ve googled fractals, and they\u2019re &lt;a href=\"https://www.google.com/search?q=fractal&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=0ahUKEwjljOT9l7nNAhXIKo8KHct2CckQ_AUICCgB&amp;amp;biw=1920&amp;amp;bih=1014\"&gt;super trippy&lt;/a&gt;. Of course, they don\u2019t know the mad programming needed to make these fractals. But you do, and that\u2019s why they pay you money.&lt;/p&gt;\n\n&lt;p&gt;A &lt;a href=\"http://wikipedia.org/wiki/julia_set\"&gt;Julia set&lt;/a&gt; is made by applying a function to the complex numbers repeatedly and keeping track of when the resulting numbers reach a threshold value. One number may take 200 iterations to achieve and absolute value over a certain threshold, value while an &lt;em&gt;almost&lt;/em&gt; identical one might only take 10 iterations.&lt;/p&gt;\n\n&lt;p&gt;Here, we\u2019re interested in Julia sets because you can make &lt;a href=\"https://en.wikipedia.org/wiki/Julia_set#/media/File:Julia_-0.8_0.156.png\"&gt;pretty pictures&lt;/a&gt; with them if you map each complex input number to a pixel on the screen. The task today is to write a program that does all the math necessary for your computer to draw one of these beautiful pictures. In addition to making a buck from the band, you can also make a set of nice wallpapers for your desktop!&lt;/p&gt;\n\n&lt;h2&gt;How to make a picture from a Julia set&lt;/h2&gt;\n\n&lt;p&gt;&lt;em&gt;1 \u2013 Pick your function&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Pick a function f which maps from a complex number z to another complex number. In our case we will use f(x) = z&lt;sup&gt;2&lt;/sup&gt; \u2013 0.221 \u2013 0.713 i, because that makes a particularly pretty picture. To customize your own picture you can change the constant \u2013 0.221 \u2013 0.713 i to something else if you want.\nThe threshold value for this function is 2.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;2 \u2013 Make a set of complex numbers&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The only complex numbers which are interesting for the Julia set are the ones where both the real and the imaginary part is between -1 and 1.  That\u2019s because, if the absolute value of an input number exceeds the threshold value, it will keep increasing or decreasing without bounds when you keep applying your function. So your program needs to keep a whole bunch of these small complex numbers in memory \u2013 one number for each pixel in your final image.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;3 - Apply f to that set of complex numbers iteratively&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Your program needs to check &lt;em&gt;how many times you can apply the function f to each of the complex numbers above before its absolute value crosses the threshold value&lt;/em&gt;. So for each of your complex numbers, you get number of iterations, I.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;4 \u2013 Map the values of I to pixels in a picture&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;You can do this in many ways, but an easier way, which I recommend, is that the real and imaginary parts of the complex numbers are the positions of the pixel on the X- and Y-axis, respectively, and I is the intensity of the pixel. You might want to set some cutoff to prevent specific pixels from iterating thousands of times.&lt;/p&gt;\n\n&lt;h2&gt;Illustrative example&lt;/h2&gt;\n\n&lt;p&gt;Say I want to make a 3x3 pixel image. I use the function f(z) = z&lt;sup&gt;2&lt;/sup&gt; \u2013 0.221 \u2013 0.713 i. I map the complex numbers with both real and imaginary parts in the interval [-1, 1] to the nine pixels, giving nine input complex numbers (pixels):&lt;/p&gt;\n\n&lt;p&gt;(-1 + 1*i) (0 + 1*i) (1 + 1*i)&lt;/p&gt;\n\n&lt;p&gt;(-1 + 0*i) (0 + 0*i) (1 + 0*i)&lt;/p&gt;\n\n&lt;p&gt;(-1 - 1*i) (0 - 1*i) (1 - 1*i)&lt;/p&gt;\n\n&lt;p&gt;I calculate how many times I need to apply f to each pixel before its absolute value crosses the threshold value 2:&lt;/p&gt;\n\n&lt;p&gt;(1) (5) (2)&lt;/p&gt;\n\n&lt;p&gt;(3) (112) (3)&lt;/p&gt;\n\n&lt;p&gt;(2) (5) (1)&lt;/p&gt;\n\n&lt;p&gt;Finally I convert it to a 3x3 pixel image with the intensities above (not shown).&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;The desired resolution in pixels written as X Y for example:&lt;/p&gt;\n\n&lt;p&gt;500 400&lt;/p&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;A Julia set with the desired resolution, in this case:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://imgur.com/4nVcHVk\"&gt;A link to the output picture&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Bonuses&lt;/h1&gt;\n\n&lt;h2&gt;Bonus #1&lt;/h2&gt;\n\n&lt;p&gt;The band needs to upload in HD. Make your program fast enough to make wallpaper-sized pictures of 1920 x 1080 pixels with a reasonable iteration depth (128 or above).&lt;/p&gt;\n\n&lt;h2&gt;Bonus #2&lt;/h2&gt;\n\n&lt;p&gt;Make your program accept an arbitrary function, f, instead of just f(x) = z&lt;sup&gt;2&lt;/sup&gt; \u2013 0.221 \u2013 0.713 i. The right function can really make the shapes crazy!&lt;/p&gt;\n\n&lt;h2&gt;Bonus #3&lt;/h2&gt;\n\n&lt;p&gt;Because neighboring pixels can vary a lot in intensity (this is a property of the Julia sets!), the result looks a little pixelated. Implement some kind of &lt;a href=\"https://en.wikipedia.org/wiki/Spatial_anti-aliasing\"&gt;anti-alialising&lt;/a&gt; to make it look prettier.&lt;/p&gt;\n\n&lt;h2&gt;Bonus #4&lt;/h2&gt;\n\n&lt;p&gt;The problem is &lt;a href=\"https://en.wikipedia.org/wiki/Embarrassingly_parallel\"&gt;embarrasingly parallel&lt;/a&gt;. There\u2019s a lot of speed to gain by parallising your code!&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This challenge is posted by &lt;a href=\"/u/Gobbedyret\"&gt;/u/Gobbedyret&lt;/a&gt; . All credits go to him/her&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nYou\u2019re making a music video for an acid rock band. Far out man! Of course they want visual effects with fractals, because they\u2019ve googled fractals, and they\u2019re [super trippy](https://www.google.com/search?q=fractal&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwjljOT9l7nNAhXIKo8KHct2CckQ_AUICCgB&amp;biw=1920&amp;bih=1014). Of course, they don\u2019t know the mad programming needed to make these fractals. But you do, and that\u2019s why they pay you money.\n\nA [Julia set](http://wikipedia.org/wiki/julia_set) is made by applying a function to the complex numbers repeatedly and keeping track of when the resulting numbers reach a threshold value. One number may take 200 iterations to achieve and absolute value over a certain threshold, value while an *almost* identical one might only take 10 iterations.\n\nHere, we\u2019re interested in Julia sets because you can make [pretty pictures](https://en.wikipedia.org/wiki/Julia_set#/media/File:Julia_-0.8_0.156.png) with them if you map each complex input number to a pixel on the screen. The task today is to write a program that does all the math necessary for your computer to draw one of these beautiful pictures. In addition to making a buck from the band, you can also make a set of nice wallpapers for your desktop!\n\n\n##How to make a picture from a Julia set\n\n*1 \u2013 Pick your function*\n\nPick a function f which maps from a complex number z to another complex number. In our case we will use f(x) = z^2 \u2013 0.221 \u2013 0.713 i, because that makes a particularly pretty picture. To customize your own picture you can change the constant \u2013 0.221 \u2013 0.713 i to something else if you want.\nThe threshold value for this function is 2.\n\n*2 \u2013 Make a set of complex numbers*\n\nThe only complex numbers which are interesting for the Julia set are the ones where both the real and the imaginary part is between -1 and 1.  That\u2019s because, if the absolute value of an input number exceeds the threshold value, it will keep increasing or decreasing without bounds when you keep applying your function. So your program needs to keep a whole bunch of these small complex numbers in memory \u2013 one number for each pixel in your final image.\n\n*3 - Apply f to that set of complex numbers iteratively*\n\nYour program needs to check *how many times you can apply the function f to each of the complex numbers above before its absolute value crosses the threshold value*. So for each of your complex numbers, you get number of iterations, I.\n\n*4 \u2013 Map the values of I to pixels in a picture*\n\nYou can do this in many ways, but an easier way, which I recommend, is that the real and imaginary parts of the complex numbers are the positions of the pixel on the X- and Y-axis, respectively, and I is the intensity of the pixel. You might want to set some cutoff to prevent specific pixels from iterating thousands of times.\n\n##Illustrative example\n\nSay I want to make a 3x3 pixel image. I use the function f(z) = z^2 \u2013 0.221 \u2013 0.713 i. I map the complex numbers with both real and imaginary parts in the interval [-1, 1] to the nine pixels, giving nine input complex numbers (pixels):\n\n(-1 + 1\\*i) (0 + 1\\*i) (1 + 1\\*i)\n\n(-1 + 0\\*i) (0 + 0\\*i) (1 + 0\\*i)\n\n(-1 - 1\\*i) (0 - 1\\*i) (1 - 1\\*i)\n\nI calculate how many times I need to apply f to each pixel before its absolute value crosses the threshold value 2:\n\n(1) (5) (2)\n\n(3) (112) (3)\n\n(2) (5) (1)\n\nFinally I convert it to a 3x3 pixel image with the intensities above (not shown).\n\n#Formal Inputs &amp; Outputs\n##Input description\n\nThe desired resolution in pixels written as X Y for example:\n\n500 400\n\n##Output description\n\nA Julia set with the desired resolution, in this case:\n\n[A link to the output picture](http://imgur.com/4nVcHVk)\n\n#Bonuses\n\n##Bonus #1\n\nThe band needs to upload in HD. Make your program fast enough to make wallpaper-sized pictures of 1920 x 1080 pixels with a reasonable iteration depth (128 or above).\n\n##Bonus #2\n\nMake your program accept an arbitrary function, f, instead of just f(x) = z^2 \u2013 0.221 \u2013 0.713 i. The right function can really make the shapes crazy!\n\n##Bonus #3\n\nBecause neighboring pixels can vary a lot in intensity (this is a property of the Julia sets!), the result looks a little pixelated. Implement some kind of [anti-alialising](https://en.wikipedia.org/wiki/Spatial_anti-aliasing) to make it look prettier.\n\n##Bonus #4\n\nThe problem is [embarrasingly parallel](https://en.wikipedia.org/wiki/Embarrassingly_parallel). There\u2019s a lot of speed to gain by parallising your code!\n\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas\n\nThis challenge is posted by /u/Gobbedyret . All credits go to him/her", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4v5h3u", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_4v5h3u", "score": 75, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4v5h3u/20160729_challenge_277_hard_trippy_julia_fractals/", "locked": false, "stickied": false, "created": 1469806262.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4v5h3u/20160729_challenge_277_hard_trippy_julia_fractals/", "author_flair_text": null, "quarantine": false, "title": "[2016-07-29] Challenge #277 [Hard] Trippy Julia fractals", "created_utc": 1469777462.0, "link_flair_text": null, "distinguished": null, "num_comments": 65, "visited": false, "num_reports": null, "ups": 75}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Their are some false golden coins, wich are lighter then others, in the treasure chest. The assistant has weighed the coins, but can not figure out which are false and which are not.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;Each coin is labeled with a letter, and is put on the scale in groups or by itself.\nThe input consist of the coins on the left side, the coins on the right side and the way the scale tipped. This can be &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt; when the two sides wheigt the same. &lt;/p&gt;\n\n&lt;h3&gt;Input 1&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;a b left\na c equal\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Input 2&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;a c equal\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Input 3&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;a c equal\na b equal\nc b left\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;You must determine which coins are lighter then the others.&lt;/p&gt;\n\n&lt;h3&gt;Output 1&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;b is lighter\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is possible that you can&amp;#39;t determine this because you have not in enough info.&lt;/p&gt;\n\n&lt;h3&gt;Output 2&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;no fake coins detected\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And it is possible that the provided data has been inconsistent.&lt;/p&gt;\n\n&lt;h3&gt;Output 3&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;data is inconsistent\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;&lt;code&gt;left&lt;/code&gt; means that the left side is heavier. Same goes for &lt;code&gt;right&lt;/code&gt;...&lt;/p&gt;\n\n&lt;h1&gt;Challenge input&lt;/h1&gt;\n\n&lt;h2&gt;1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;ab xy left\nb x equal\na b equal\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;a x equal\nb x equal\ny a left\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;3&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;abcd efgh equal\nabci efjk left\nabij efgl equal\nmnopqrs tuvwxyz equal\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;4&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;abc efg equal\na e left\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Edit Notes&lt;/h1&gt;\n\n&lt;p&gt;You can assume that there is only 1 fake coin, if not, the data is inconsistent.\nIf your solution worked without this assumption, you can leave it like that.&lt;/p&gt;\n\n&lt;p&gt;And all real coins weight the same, just like the fake coins. But no real weight is necessary to complete the challenge&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nTheir are some false golden coins, wich are lighter then others, in the treasure chest. The assistant has weighed the coins, but can not figure out which are false and which are not.\n\n#Formal Inputs &amp; Outputs\n\n##Input description\n\nEach coin is labeled with a letter, and is put on the scale in groups or by itself.\nThe input consist of the coins on the left side, the coins on the right side and the way the scale tipped. This can be `left`, `right` or `equal` when the two sides wheigt the same. \n\n###Input 1\n\n    a b left\n    a c equal\n\n###Input 2\n\n    a c equal\n    \n###Input 3\n\n    a c equal\n    a b equal\n    c b left\n\n##Output description\n\nYou must determine which coins are lighter then the others.\n\n###Output 1\n\n    b is lighter\n    \nIt is possible that you can't determine this because you have not in enough info.\n\n###Output 2\n\n    no fake coins detected\n    \nAnd it is possible that the provided data has been inconsistent.\n\n###Output 3\n\n    data is inconsistent\n\n#Notes/Hints\n\n`left` means that the left side is heavier. Same goes for `right`...\n\n\n#Challenge input\n\n##1\n\n    ab xy left\n    b x equal\n    a b equal\n    \n##2\n\n    a x equal\n    b x equal\n    y a left\n   \n##3\n\n    abcd efgh equal\n    abci efjk left\n    abij efgl equal\n    mnopqrs tuvwxyz equal\n\n##4\n\n    abc efg equal\n    a e left\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas\n\n#Edit Notes\nYou can assume that there is only 1 fake coin, if not, the data is inconsistent.\nIf your solution worked without this assumption, you can leave it like that.\n\nAnd all real coins weight the same, just like the fake coins. But no real weight is necessary to complete the challenge", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4utlaz", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_4utlaz", "score": 73, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1469689058.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4utlaz/20160727_challenge_277_intermediate_fake_coins/", "locked": false, "stickied": false, "created": 1469636507.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4utlaz/20160727_challenge_277_intermediate_fake_coins/", "author_flair_text": null, "quarantine": false, "title": "[2016-07-27] Challenge #277 [Intermediate] Fake coins", "created_utc": 1469607707.0, "link_flair_text": null, "distinguished": null, "num_comments": 38, "visited": false, "num_reports": null, "ups": 73}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;A fraction exists of a numerator (top part) and a denominator (bottom part) as you probably all know.&lt;/p&gt;\n\n&lt;p&gt;Simplifying (or reducing) fractions means to make the fraction as simple as possible. Meaning that the denominator is a close to &lt;code&gt;1&lt;/code&gt; as possible.\nThis can be done by dividing the numerator and denominator by their greatest common divisor.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;You will be given a list with 2 numbers seperator by a space.\nThe first is the numerator, the second the denominator&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;4 8\n1536 78360\n51478 5536\n46410 119340\n7673 4729\n4096 1024\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;The most simplified numbers&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1 2\n64 3265\n25739 2768\n7 18\n7673 4729\n4 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;Most languages have by default this kind of functionality, but if you want to challenge yourself, you should go back to the basic theory and implement it yourself.&lt;/p&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Instead of using numbers, we could also use letters.&lt;/p&gt;\n\n&lt;p&gt;For instance&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ab   a\n__ = _\ncb   c \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And if you know that &lt;code&gt;x = cb&lt;/code&gt;, then you would have this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ab   a\n__ = _\nx    c  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and offcourse:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a    1\n__ = _\na    1\n\naa   a\n__ = _\na    1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The input will be first a number saying how many equations there are. And after the equations, you have the fractions.&lt;/p&gt;\n\n&lt;p&gt;The equations are a letter and a value seperated by a space.\nAn equation can have another equation in it.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;3\nx cb\ny ab\nz xa\nab cb\nab x\nx y\nz y\nz xay\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a c\na c\nc a\nc 1\n1 ab\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nA fraction exists of a numerator (top part) and a denominator (bottom part) as you probably all know.\n\nSimplifying (or reducing) fractions means to make the fraction as simple as possible. Meaning that the denominator is a close to `1` as possible.\nThis can be done by dividing the numerator and denominator by their greatest common divisor.\n\n#Formal Inputs &amp; Outputs\n\n##Input description\n\nYou will be given a list with 2 numbers seperator by a space.\nThe first is the numerator, the second the denominator\n\n    4 8\n    1536 78360\n    51478 5536\n    46410 119340\n    7673 4729\n    4096 1024\n\n##Output description\n\nThe most simplified numbers\n\n    1 2\n    64 3265\n    25739 2768\n    7 18\n    7673 4729\n    4 1\n\n#Notes/Hints\n\nMost languages have by default this kind of functionality, but if you want to challenge yourself, you should go back to the basic theory and implement it yourself.\n\n#Bonus\n\nInstead of using numbers, we could also use letters.\n\nFor instance\n\n    ab   a\n    __ = _\n    cb   c \n    \nAnd if you know that `x = cb`, then you would have this:\n\n    ab   a\n    __ = _\n    x    c  \n\nand offcourse:\n\n    a    1\n    __ = _\n    a    1\n\n    aa   a\n    __ = _\n    a    1\n    \nThe input will be first a number saying how many equations there are. And after the equations, you have the fractions.\n\nThe equations are a letter and a value seperated by a space.\nAn equation can have another equation in it.\n\n    3\n    x cb\n    y ab\n    z xa\n    ab cb\n    ab x\n    x y\n    z y\n    z xay\n\noutput:\n\n    a c\n    a c\n    c a\n    c 1\n    1 ab\n\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4uhqdb", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "fvandepitte", "media": null, "name": "t3_4uhqdb", "score": 92, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4uhqdb/20160725_challenge_277_easy_simplifying_fractions/", "locked": false, "stickied": false, "created": 1469467682.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4uhqdb/20160725_challenge_277_easy_simplifying_fractions/", "author_flair_text": null, "quarantine": false, "title": "[2016-07-25] Challenge #277 [Easy] Simplifying fractions", "created_utc": 1469438882.0, "link_flair_text": null, "distinguished": null, "num_comments": 188, "visited": false, "num_reports": null, "ups": 92}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This is the same challenge as &lt;a href=\"/u/jnazario\"&gt;/u/jnazario&lt;/a&gt;&amp;#39;s excellent &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/4rug59/20160708_challenge_274_hard_loop_solver/\"&gt;\u221e Loop solver&lt;/a&gt; but for larger inputs.&lt;/p&gt;\n\n&lt;p&gt;The input format is different, as you will be given a presolved partial grid, where each cell is the possible rotations that line up with a possible rotation of neighbour cells.&lt;/p&gt;\n\n&lt;p&gt;The challenge is to find ALL of the valid grid solutions&lt;/p&gt;\n\n&lt;h1&gt;20x20 input visualization&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;\u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2510\n\u25026\u250212   \u25026   \u250210     \u250210  \u250212 \u25026  \u250212  \u25026    \u250212      \u25026   \u250214      \u250212  \u25026    \u250210\u250210\u250210\u250214\u250214\u250212\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25027\u250213   \u25023   \u250214     \u250212  \u25023  \u25029  \u25027   \u250215   \u25029       \u25025   \u25027       \u250211  \u25029    \u25026 \u250212\u25026 \u250213\u25025 \u25025 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25027\u25029    \u25026   \u25029      \u25027   \u250210 \u250210 \u25029   \u25027    \u250210      \u250213  \u25027       \u250210  \u250210   \u25029 \u25025 \u25025 \u25025 \u25023 \u25029 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25025\u25026    \u250215  \u250212     \u25025   \u25026  \u250214 \u250214  \u250215   \u250212      \u25025   \u25023       \u250210  \u250214   \u250210\u250211\u250211\u250215\u250210\u250212\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25027\u250213   \u25023   \u25029      \u25023   \u250215 \u250211 \u250213  \u25027    \u25029       \u25027   \u250212      \u25026   \u250211   \u250210\u250210\u250210\u25029 \u25026 \u25029 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25027\u250211   \u250214  \u250214     \u250214  \u25029  \u25026  \u250215  \u250215   \u250212      \u25025   \u25023       \u250215  \u250214   \u250214\u250212\u25026 \u250212\u25023 \u250212\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25025\u25026    \u25029   \u25023      \u25029   \u25026  \u25029  \u25025   \u25027    \u250213      \u25025   \u25026       \u250215  \u250215   \u250215\u250213\u25027 \u250213\u25026 \u250213\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25025\u25025    \u25026   \u250210     \u250210  \u250213 \u25026  \u250215  \u250215   \u250211 13   \u250213 7\u25027 13 11 \u250211 7\u250211   \u250215\u250211\u25029 \u25023 \u250215\u25029 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25027\u25029    \u25025   \u25026      \u250210  \u250211 \u25029  \u25027   \u25029    \u25026 3     \u250211  \u250211 13 14\u250214 7\u250210   \u250211\u250214\u250212\u25026 \u250215\u250212\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25025\u25026    \u25029   \u25023      \u250212  \u25026  \u250210 \u25029   \u25026    \u250213 11 14\u25026 12\u250214 7    \u25029   \u25026    \u250210\u25029 \u25027 \u25029 \u25025 \u25025 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25027\u250211   \u250214  \u250210     \u25029   \u25027  \u250210 \u250214  \u250213 11\u25027 14    \u250211  \u250211      \u250210  \u250213   \u25026 \u250214\u25029 \u25026 \u250213\u25025 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25027\u250212   \u25027   \u250212     \u25026   \u250213 \u25026  \u25029   \u25023 6  \u250213      \u25026   \u250210      \u250212  \u25027    \u250211\u250211\u250214\u250215\u250213\u25025 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25027\u250213 11\u25023 9 \u250211 13 7\u250213 7\u25023 9\u25029 3\u25026 12\u250214 7 \u250215      \u250211  \u250210      \u25029   \u25023    \u250214\u250210\u25029 \u25023 \u25029 \u25025 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25027\u250213 14\u25026 12\u250214 7   \u250211  \u250212 \u25026  \u250213  \u25025    \u25023       \u250214  \u250212      \u25026   \u250212   \u25025 \u25026 \u250214\u250214\u250212\u25025 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25025\u25023    \u250215  \u250211     \u250212  \u25027  \u25029  \u25027   \u250211   \u250212      \u25025   \u25027       \u25029   \u25027    \u250215\u250211\u250213\u25027 \u250213\u25025 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25025\u25026    \u25029   \u25026      \u250211  \u250213 \u25026  \u250213  \u25026    \u250215      \u25029   \u25027       \u250210  \u250213   \u25023 \u250210\u25029 \u25023 \u250215\u250213\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25023\u250213   \u25026   \u250215     \u250212  \u25027  \u250215 \u25029   \u25023    \u250213      \u25026   \u250213 11   \u25026 12\u250211 7 \u250214\u250210\u250212\u25026 \u250215\u25029 \u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25026\u250213   \u25023   \u250211     \u250215  \u250215 \u250213 \u25026   \u250210   \u250215      \u250211  \u250211 14   \u250211  \u250214 11\u250213\u25026 \u250215\u25029 \u25023 \u250212\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25027\u250211   \u250212  \u25026      \u250215  \u25029  \u25025  \u25027   \u250214   \u25029       \u25026   \u250214 13   \u250212 6\u25027 14 \u25029 \u25025 \u25027 \u250212\u25026 \u250213\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n\u25023\u250210   \u25029   \u25023      \u250211  \u250210 \u250211 \u250211  \u250211   \u250210      \u25029   \u25023       \u250211  \u250211   \u250210\u250211\u250211\u25029 \u25023 \u25029 \u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;The numbers in each cell are indexes (0-based) into the looper tiles &lt;code&gt;\u2579\u257a\u2517\u257b\u2503\u250f\u2523\u2578\u251b\u2501\u253b\u2513\u252b\u2533\u254b&lt;/code&gt; (leading index 0 is space)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The 4 digit binary representation of each index indicates whether there is a tick that points &lt;code&gt;WSEN&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Cells with a single index are forced moves.  Cells with multiple indexes are potential moves.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The general strategy for finding all valid final (ones with single indexes per cell) grids is to repeatedly split the grid based on one multiple cell (where each grid has a unique index in that cell), and then find all forced moves in each independent grid.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;A forced move by row is one where the left cells&amp;#39; East tick is equal to the right cell&amp;#39;s West tick.  By column, the top cell&amp;#39;s South tick is equal to the lower cell&amp;#39;s North tick.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;input&lt;/strong&gt;  (each row separated by LF, each cell by comma, each candidate by space)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;20x20\n6,12,6,10,10,12,6,12,6,12,6,14,12,6,10,10,10,14,14,12                \n7,13,3,14,12,3,9,7,15,9,5,7,11,9,6,12,6,13,5,5                       \n7,9,6,9,7,10,10,9,7,10,13,7,10,10,9,5,5,5,3,9                        \n5,6,15,12,5,6,14,14,15,12,5,3,10,14,10,11,11,15,10,12                \n7,13,3,9,3,15,11,13,7,9,7,12,6,11,10,10,10,9,6,9                     \n7,11,14,14,14,9,6,15,15,12,5,3,15,14,14,12,6,12,3,12                 \n5,6,9,3,9,6,9,5,7,13,5,6,15,15,15,13,7,13,6,13                       \n5,5,6,10,10,13,6,15,15,11 13,13 7,7 13 11,11 7,11,15,11,9,3,15,9     \n7,9,5,6,10,11,9,7,9,6 3,11,11 13 14,14 7,10,11,14,12,6,15,12         \n5,6,9,3,12,6,10,9,6,13 11 14,6 12,14 7,9,6,10,9,7,9,5,5              \n7,11,14,10,9,7,10,14,13 11,7 14,11,11,10,13,6,14,9,6,13,5            \n7,12,7,12,6,13,6,9,3 6,13,6,10,12,7,11,11,14,15,13,5                 \n7,13 11,3 9,11 13 7,13 7,3 9,9 3,6 12,14 7,15,11,10,9,3,14,10,9,3,9,5\n7,13 14,6 12,14 7,11,12,6,13,5,3,14,12,6,12,5,6,14,14,12,5           \n5,3,15,11,12,7,9,7,11,12,5,7,9,7,15,11,13,7,13,5                     \n5,6,9,6,11,13,6,13,6,15,9,7,10,13,3,10,9,3,15,13                     \n3,13,6,15,12,7,15,9,3,13,6,13 11,6 12,11 7,14,10,12,6,15,9           \n6,13,3,11,15,15,13,6,10,15,11,11 14,11,14 11,13,6,15,9,3,12          \n7,11,12,6,15,9,5,7,14,9,6,14 13,12 6,7 14,9,5,7,12,6,13              \n3,10,9,3,11,10,11,11,11,10,9,3,11,11,10,11,11,9,3,9                  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;to save space just provide the number of distinct valid grids.  (I get 12)&lt;/p&gt;\n\n&lt;h1&gt;30x30 challenges&lt;/h1&gt;\n\n&lt;p&gt;thanks to &lt;a href=\"/u/bearific\"&gt;/u/bearific&lt;/a&gt; for creating a generator for this challenge.  The above and larger inputs are available here:&lt;br/&gt;\n&lt;a href=\"https://gist.github.com/FrankRuis/0aa761b9562a32ea7fdcff32f1768eb0\"&gt;https://gist.github.com/FrankRuis/0aa761b9562a32ea7fdcff32f1768eb0&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;reduced input&amp;quot; (above) formats of the 30x30 challenges:  (you may use the original input format and solve these anyway you like)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;first input&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;6,10,14,12,6,14,10,12,6,12,6,14,10,12,6,10,14,14,14,12,6,14,12,6,10,14,10,12,6,12                          \n3,14,13,7,13,3,14,15,15,15,11,13,6,9,5,6,11,9,5,3,15,15,13,5,6,15,10,15,13,5                               \n6,11,15,15,15,10,13 11,7 11,15,9,6,9,7,12,3,13,6,10,11,14,11,15,15,11,15,9,6,13,7,13                       \n7,12,3,13,5,6,13 14,7 14,11,14,9,6,15,11,14,15,11,10,12,7,12,7,13 11,6 12,13 7,6 12,11 7,13,5,5            \n7,11,14,9,3,9,7,13,6,15,14,13,5,6,9,3,10,10,13,3,15,13,3 6,15,15,11 13,14 7,13,5,5                         \n7,14,13,6,14,12,5,7,15,15,9,3,9,5,6,12,6,14,9,6,15,13 11,6 12 3 9,9 3,7 13,14 7,15,13,7,9                  \n7,15,13,5,5,3,9,5,5,5,6,14,14,9,3,11,11,13,6,15,15,13 14,7 11 14,14,15,15,15,11,11,12                      \n7,11,9,5,7,12,6,13,3,13,3,13,3,10,10,10,14,11 7,9,5,3,11,13 14,7 11,15,11,11,10,12,5                       \n5,6,10,9,5,5,5,7,12,5,6,9,6,12,6,14,13 11,6 12 3 9,12 6,7 13,12 6,6 12,9 3,7 14,15,10,12,6,15,13           \n7,9,6,12,3,9,5,5,3,9,3,14,11 13,11 13 7,11 13 7,13 11 7,5 10,7 13 14,11 7,13,5,7,14,11,9,6,11,13,3,13      \n5,6,11,9,6,12,3,13,6,14,14,13,6,10,14 11,11,11 14,13,6 3,15,11,15,9,6,12,7,10,9,6,13                       \n3,11,10,10,9,3,10,15,9,7,15,13,5,6,13 14,6 12,14 13 7,9 3,7 13 14,11 7,14,9,6,11,13,3,12,6,11,9            \n6,10,14,10,10,12,6,15,10,11 13,13 7,7 11,13,5,5,3,11,14,13,6 3,15,12,5,6,15,12,5,7,14,12                   \n5,6,9,6,14,11,15,15,10,12 9,7,11 14,13,7,13,6,12,5,3,11 14,9,5,5,7,15,15,11,15,15,9                        \n3,15,14,15,13,6,9,5,6,13 11 14,3 9,14 13 7,13 7,3 9,11 7,11,15,9,6,14 11,10,11,15,11 13,11 7,13,6,11,11,12 \n6,15,15,15,11,15,14,11 13,13 7,7 14,12,3,15,10,12 9,6,9,6,11 13,11 7 14,10,12,3,14 13,14 7,15,11,12,6,13   \n3,9,7,9,6,13 11,7 13 11,14 11 7,15,11,15,12,5,6,13 14,3 9,12 6,3 9,10 5,14 11 7,10,15,14,13,5,3,10,15,11,13\n6,14,11,14,15,13 11 14,7 13 11 14,11 13 7 14,11 7,10,9,3,11,13,5,6,13,6,12 9,3 6,10,13,3,13,5,6,12,3,10,9  \n3,13,6,13,3,13 14,7 13 14,14 13 11 7,14 11 7,14,12,6,10,9,5,5,3,15,11 13 14,14 7,10,13,6,15,11,13,5,6,10,12\n6,15,9,3,14,9,7,13 14,7 14,15,11,11,10,12,3,15,12,3,14 13,9 3,6 12,11 7,13,7,10,11,11,15,12,5              \n7,13,6,10,15,14,9,5,3,11,14,12,6,9,6,9,3,14,9,6,15,12 9,5,7,10,10,12,3,13,5                                \n7,9,7,14,11,11,12,5,6,10,11,13,7,12,5,6,12,7,10,11,13 11,3 9 6 12,13 11 7,7 11,14,14,11,12,5,5             \n5,6,13,7,12,6,13,5,3,14,14,13,3,15,11,11,11,13,6,12,7 13 14,10 5,11 7 14,9 12,3,15,14,11,11,13             \n7,9,7,9,5,7,11,15,14,13,5,7,12,3,10,14,12,3,13 11,3 9,9 3,6 12 3 9,14 13 7,14 7,10,11,15,14,12,5           \n7,12,3,10,11,15,14,11,9,3,9,3,15,12,6,13,3,10,13 14,6 12,12 6,7 14,11,15,14,12,3,13,5,5                    \n3,9,6,10,12,7,9,6,14,10,12,6,13,7,15,15,12,6,9,7,15,11,12,3,13,3,12,3,9,5                                  \n6,12,7,14,9,7,14,9,7,12,3,9,3,15,11 13,11 7,9,5,6,15,15,14,15,12,3,14,13,6,14,9                            \n7,15,13,7,10,11,11,10,13,5,6,10,14,13,6 3,14 11,10,9,5,5,3,13,5,5,6,15,11,15,15,12                         \n7,9,3,13,6,14,12,6,15,11,11,10,11,11,13 14,7 14,14,12,7,15,12,7,15,13,3,13,6,11,15,13                      \n3,10,10,9,3,9,3,9,3,10,10,10,10,10,9,3,9,3,9,3,11,9,3,11,10,9,3,10,11,9                                    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;input 2&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;6,10,14,12,6,14,10,12,6,12,6,14,10,12,6,10,14,14,14,12,6,14,12,6,10,14,10,12,6,12                          \n3,14,13,7,13,3,14,15,15,15,11,13,6,9,5,6,11,9,5,3,15,15,13,5,6,15,10,15,13,5                               \n6,11,15,15,15,10,13 11,7 11,15,9,6,9,7,12,3,13,6,10,11,14,11,15,15,11,15,9,6,13,7,13                       \n7,12,3,13,5,6,13 14,7 14,11,14,9,6,15,11,14,15,11,10,12,7,12,7,13 11,6 12,13 7,6 12,11 7,13,5,5            \n7,11,14,9,3,9,7,13,6,15,14,13,5,6,9,3,10,10,13,3,15,13,3 6,15,15,13 11,14 7,13,5,5                         \n7,14,13,6,14,12,5,7,15,15,9,3,9,5,6,12,6,14,9,6,15,11 13,12 6 9 3,3 9,13 7,7 14,15,13,7,9                  \n7,15,13,5,5,3,9,5,5,5,6,14,14,9,3,11,11,13,6,15,15,14 13,11 7 14,14,15,15,15,11,11,12                      \n7,11,9,5,7,12,6,13,3,13,3,13,3,10,10,10,14,11 7,9,5,3,11,14 13,11 7,15,11,11,10,12,5                       \n5,6,10,9,5,5,5,7,12,5,6,9,6,12,6,14,13 11,6 12 3 9,12 6,7 13,12 6,6 12,9 3,14 7,15,10,12,6,15,13           \n7,9,6,12,3,9,5,5,3,9,3,14,13 11,7 13 11,13 11 7,7 13 11,5 10,13 7 14,7 11,13,5,7,14,11,9,6,11,13,3,13      \n5,6,11,9,6,12,3,13,6,14,14,13,6,10,11 14,11,11 14,13,6 3,15,11,15,9,6,12,7,10,9,6,13                       \n3,11,10,10,9,3,10,15,9,7,15,13,5,6,14 13,12 6,14 7 13,9 3,7 13 14,11 7,14,9,6,11,13,3,12,6,11,9            \n6,10,14,10,10,12,6,15,10,13 11,7 13,11 7,13,5,5,3,11,14,13,6 3,15,12,5,6,15,12,5,7,14,12                   \n5,6,9,6,14,11,15,15,10,9 12,7,14 11,13,7,13,6,12,5,3,11 14,9,5,5,7,15,15,11,15,15,9                        \n3,15,14,15,13,6,9,5,6,14 13 11,9 3,7 13 14,13 7,3 9,11 7,11,15,9,6,14 11,10,11,15,13 11,7 11,13,6,11,11,12 \n6,15,15,15,11,15,14,13 11,7 13,7 14,12,3,15,10,12 9,6,9,6,13 11,7 11 14,10,12,3,13 14,7 14,15,11,12,6,13   \n3,9,7,9,6,13 11,7 13 11,11 7 14,15,11,15,12,5,6,13 14,9 3,6 12,9 3,5 10,7 11 14,10,15,14,13,5,3,10,15,11,13\n6,14,11,14,15,13 11 14,7 13 11 14,14 13 11 7,11 7,10,9,3,11,13,5,6,13,6,9 12,3 6,10,13,3,13,5,6,12,3,10,9  \n3,13,6,13,3,13 14,7 13 14,13 11 7 14,14 7 11,14,12,6,10,9,5,5,3,15,14 13 11,14 7,10,13,6,15,11,13,5,6,10,12\n6,15,9,3,14,9,7,13 14,7 14,15,11,11,10,12,3,15,12,3,13 14,3 9,12 6,7 11,13,7,10,11,11,15,12,5              \n7,13,6,10,15,14,9,5,3,11,14,12,6,9,6,9,3,14,9,6,15,9 12,5,7,10,10,12,3,13,5                                \n7,9,7,14,11,11,12,5,6,10,11,13,7,12,5,6,12,7,10,11,11 13,12 6 9 3,7 13 11,11 7,14,14,11,12,5,5             \n5,6,13,7,12,6,13,5,3,14,14,13,3,15,11,11,11,13,6,12,14 13 7,5 10,11 7 14,12 9,3,15,14,11,11,13             \n7,9,7,9,5,7,11,15,14,13,5,7,12,3,10,14,12,3,13 11,3 9,9 3,3 9 6 12,14 13 7,7 14,10,11,15,14,12,5           \n7,12,3,10,11,15,14,11,9,3,9,3,15,12,6,13,3,10,13 14,6 12,12 6,14 7,11,15,14,12,3,13,5,5                    \n3,9,6,10,12,7,9,6,14,10,12,6,13,7,15,15,12,6,9,7,15,11,12,3,13,3,12,3,9,5                                  \n6,12,7,14,9,7,14,9,7,12,3,9,3,15,13 11,7 11,9,5,6,15,15,14,15,12,3,14,13,6,14,9                            \n7,15,13,7,10,11,11,10,13,5,6,10,14,13,3 6,11 14,10,9,5,5,3,13,5,5,6,15,11,15,15,12                         \n7,9,3,13,6,14,12,6,15,11,11,10,11,11,14 13,14 7,14,12,7,15,12,7,15,13,3,13,6,11,15,13                      \n3,10,10,9,3,9,3,9,3,10,10,10,10,10,9,3,9,3,9,3,11,9,3,11,10,9,3,10,11,9          \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "This is the same challenge as /u/jnazario's excellent [\u221e Loop solver](https://www.reddit.com/r/dailyprogrammer/comments/4rug59/20160708_challenge_274_hard_loop_solver/) but for larger inputs.\n\nThe input format is different, as you will be given a presolved partial grid, where each cell is the possible rotations that line up with a possible rotation of neighbour cells.\n\nThe challenge is to find ALL of the valid grid solutions\n\n# 20x20 input visualization\n\n    \u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2510\n    \u25026\u250212   \u25026   \u250210     \u250210  \u250212 \u25026  \u250212  \u25026    \u250212      \u25026   \u250214      \u250212  \u25026    \u250210\u250210\u250210\u250214\u250214\u250212\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25027\u250213   \u25023   \u250214     \u250212  \u25023  \u25029  \u25027   \u250215   \u25029       \u25025   \u25027       \u250211  \u25029    \u25026 \u250212\u25026 \u250213\u25025 \u25025 \u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25027\u25029    \u25026   \u25029      \u25027   \u250210 \u250210 \u25029   \u25027    \u250210      \u250213  \u25027       \u250210  \u250210   \u25029 \u25025 \u25025 \u25025 \u25023 \u25029 \u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25025\u25026    \u250215  \u250212     \u25025   \u25026  \u250214 \u250214  \u250215   \u250212      \u25025   \u25023       \u250210  \u250214   \u250210\u250211\u250211\u250215\u250210\u250212\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25027\u250213   \u25023   \u25029      \u25023   \u250215 \u250211 \u250213  \u25027    \u25029       \u25027   \u250212      \u25026   \u250211   \u250210\u250210\u250210\u25029 \u25026 \u25029 \u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25027\u250211   \u250214  \u250214     \u250214  \u25029  \u25026  \u250215  \u250215   \u250212      \u25025   \u25023       \u250215  \u250214   \u250214\u250212\u25026 \u250212\u25023 \u250212\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25025\u25026    \u25029   \u25023      \u25029   \u25026  \u25029  \u25025   \u25027    \u250213      \u25025   \u25026       \u250215  \u250215   \u250215\u250213\u25027 \u250213\u25026 \u250213\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25025\u25025    \u25026   \u250210     \u250210  \u250213 \u25026  \u250215  \u250215   \u250211 13   \u250213 7\u25027 13 11 \u250211 7\u250211   \u250215\u250211\u25029 \u25023 \u250215\u25029 \u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25027\u25029    \u25025   \u25026      \u250210  \u250211 \u25029  \u25027   \u25029    \u25026 3     \u250211  \u250211 13 14\u250214 7\u250210   \u250211\u250214\u250212\u25026 \u250215\u250212\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25025\u25026    \u25029   \u25023      \u250212  \u25026  \u250210 \u25029   \u25026    \u250213 11 14\u25026 12\u250214 7    \u25029   \u25026    \u250210\u25029 \u25027 \u25029 \u25025 \u25025 \u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25027\u250211   \u250214  \u250210     \u25029   \u25027  \u250210 \u250214  \u250213 11\u25027 14    \u250211  \u250211      \u250210  \u250213   \u25026 \u250214\u25029 \u25026 \u250213\u25025 \u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25027\u250212   \u25027   \u250212     \u25026   \u250213 \u25026  \u25029   \u25023 6  \u250213      \u25026   \u250210      \u250212  \u25027    \u250211\u250211\u250214\u250215\u250213\u25025 \u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25027\u250213 11\u25023 9 \u250211 13 7\u250213 7\u25023 9\u25029 3\u25026 12\u250214 7 \u250215      \u250211  \u250210      \u25029   \u25023    \u250214\u250210\u25029 \u25023 \u25029 \u25025 \u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25027\u250213 14\u25026 12\u250214 7   \u250211  \u250212 \u25026  \u250213  \u25025    \u25023       \u250214  \u250212      \u25026   \u250212   \u25025 \u25026 \u250214\u250214\u250212\u25025 \u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25025\u25023    \u250215  \u250211     \u250212  \u25027  \u25029  \u25027   \u250211   \u250212      \u25025   \u25027       \u25029   \u25027    \u250215\u250211\u250213\u25027 \u250213\u25025 \u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25025\u25026    \u25029   \u25026      \u250211  \u250213 \u25026  \u250213  \u25026    \u250215      \u25029   \u25027       \u250210  \u250213   \u25023 \u250210\u25029 \u25023 \u250215\u250213\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25023\u250213   \u25026   \u250215     \u250212  \u25027  \u250215 \u25029   \u25023    \u250213      \u25026   \u250213 11   \u25026 12\u250211 7 \u250214\u250210\u250212\u25026 \u250215\u25029 \u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25026\u250213   \u25023   \u250211     \u250215  \u250215 \u250213 \u25026   \u250210   \u250215      \u250211  \u250211 14   \u250211  \u250214 11\u250213\u25026 \u250215\u25029 \u25023 \u250212\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25027\u250211   \u250212  \u25026      \u250215  \u25029  \u25025  \u25027   \u250214   \u25029       \u25026   \u250214 13   \u250212 6\u25027 14 \u25029 \u25025 \u25027 \u250212\u25026 \u250213\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u253c\u2500\u2500\u2524\n    \u25023\u250210   \u25029   \u25023      \u250211  \u250210 \u250211 \u250211  \u250211   \u250210      \u25029   \u25023       \u250211  \u250211   \u250210\u250211\u250211\u25029 \u25023 \u25029 \u2502\n    \u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2534\u2500\u2500\u2518\n\n1. The numbers in each cell are indexes (0-based) into the looper tiles `\u2579\u257a\u2517\u257b\u2503\u250f\u2523\u2578\u251b\u2501\u253b\u2513\u252b\u2533\u254b` (leading index 0 is space)\n\n2. The 4 digit binary representation of each index indicates whether there is a tick that points `WSEN`\n\n3. Cells with a single index are forced moves.  Cells with multiple indexes are potential moves.\n\n4. The general strategy for finding all valid final (ones with single indexes per cell) grids is to repeatedly split the grid based on one multiple cell (where each grid has a unique index in that cell), and then find all forced moves in each independent grid.\n\n5. A forced move by row is one where the left cells' East tick is equal to the right cell's West tick.  By column, the top cell's South tick is equal to the lower cell's North tick.\n\n**input**  (each row separated by LF, each cell by comma, each candidate by space)\n\n    20x20\n    6,12,6,10,10,12,6,12,6,12,6,14,12,6,10,10,10,14,14,12                \n    7,13,3,14,12,3,9,7,15,9,5,7,11,9,6,12,6,13,5,5                       \n    7,9,6,9,7,10,10,9,7,10,13,7,10,10,9,5,5,5,3,9                        \n    5,6,15,12,5,6,14,14,15,12,5,3,10,14,10,11,11,15,10,12                \n    7,13,3,9,3,15,11,13,7,9,7,12,6,11,10,10,10,9,6,9                     \n    7,11,14,14,14,9,6,15,15,12,5,3,15,14,14,12,6,12,3,12                 \n    5,6,9,3,9,6,9,5,7,13,5,6,15,15,15,13,7,13,6,13                       \n    5,5,6,10,10,13,6,15,15,11 13,13 7,7 13 11,11 7,11,15,11,9,3,15,9     \n    7,9,5,6,10,11,9,7,9,6 3,11,11 13 14,14 7,10,11,14,12,6,15,12         \n    5,6,9,3,12,6,10,9,6,13 11 14,6 12,14 7,9,6,10,9,7,9,5,5              \n    7,11,14,10,9,7,10,14,13 11,7 14,11,11,10,13,6,14,9,6,13,5            \n    7,12,7,12,6,13,6,9,3 6,13,6,10,12,7,11,11,14,15,13,5                 \n    7,13 11,3 9,11 13 7,13 7,3 9,9 3,6 12,14 7,15,11,10,9,3,14,10,9,3,9,5\n    7,13 14,6 12,14 7,11,12,6,13,5,3,14,12,6,12,5,6,14,14,12,5           \n    5,3,15,11,12,7,9,7,11,12,5,7,9,7,15,11,13,7,13,5                     \n    5,6,9,6,11,13,6,13,6,15,9,7,10,13,3,10,9,3,15,13                     \n    3,13,6,15,12,7,15,9,3,13,6,13 11,6 12,11 7,14,10,12,6,15,9           \n    6,13,3,11,15,15,13,6,10,15,11,11 14,11,14 11,13,6,15,9,3,12          \n    7,11,12,6,15,9,5,7,14,9,6,14 13,12 6,7 14,9,5,7,12,6,13              \n    3,10,9,3,11,10,11,11,11,10,9,3,11,11,10,11,11,9,3,9                  \n    \n\n**output**\n\nto save space just provide the number of distinct valid grids.  (I get 12)\n\n# 30x30 challenges\n\nthanks to /u/bearific for creating a generator for this challenge.  The above and larger inputs are available here:    \nhttps://gist.github.com/FrankRuis/0aa761b9562a32ea7fdcff32f1768eb0\n\n\"reduced input\" (above) formats of the 30x30 challenges:  (you may use the original input format and solve these anyway you like)\n\n**first input**\n\n    6,10,14,12,6,14,10,12,6,12,6,14,10,12,6,10,14,14,14,12,6,14,12,6,10,14,10,12,6,12                          \n    3,14,13,7,13,3,14,15,15,15,11,13,6,9,5,6,11,9,5,3,15,15,13,5,6,15,10,15,13,5                               \n    6,11,15,15,15,10,13 11,7 11,15,9,6,9,7,12,3,13,6,10,11,14,11,15,15,11,15,9,6,13,7,13                       \n    7,12,3,13,5,6,13 14,7 14,11,14,9,6,15,11,14,15,11,10,12,7,12,7,13 11,6 12,13 7,6 12,11 7,13,5,5            \n    7,11,14,9,3,9,7,13,6,15,14,13,5,6,9,3,10,10,13,3,15,13,3 6,15,15,11 13,14 7,13,5,5                         \n    7,14,13,6,14,12,5,7,15,15,9,3,9,5,6,12,6,14,9,6,15,13 11,6 12 3 9,9 3,7 13,14 7,15,13,7,9                  \n    7,15,13,5,5,3,9,5,5,5,6,14,14,9,3,11,11,13,6,15,15,13 14,7 11 14,14,15,15,15,11,11,12                      \n    7,11,9,5,7,12,6,13,3,13,3,13,3,10,10,10,14,11 7,9,5,3,11,13 14,7 11,15,11,11,10,12,5                       \n    5,6,10,9,5,5,5,7,12,5,6,9,6,12,6,14,13 11,6 12 3 9,12 6,7 13,12 6,6 12,9 3,7 14,15,10,12,6,15,13           \n    7,9,6,12,3,9,5,5,3,9,3,14,11 13,11 13 7,11 13 7,13 11 7,5 10,7 13 14,11 7,13,5,7,14,11,9,6,11,13,3,13      \n    5,6,11,9,6,12,3,13,6,14,14,13,6,10,14 11,11,11 14,13,6 3,15,11,15,9,6,12,7,10,9,6,13                       \n    3,11,10,10,9,3,10,15,9,7,15,13,5,6,13 14,6 12,14 13 7,9 3,7 13 14,11 7,14,9,6,11,13,3,12,6,11,9            \n    6,10,14,10,10,12,6,15,10,11 13,13 7,7 11,13,5,5,3,11,14,13,6 3,15,12,5,6,15,12,5,7,14,12                   \n    5,6,9,6,14,11,15,15,10,12 9,7,11 14,13,7,13,6,12,5,3,11 14,9,5,5,7,15,15,11,15,15,9                        \n    3,15,14,15,13,6,9,5,6,13 11 14,3 9,14 13 7,13 7,3 9,11 7,11,15,9,6,14 11,10,11,15,11 13,11 7,13,6,11,11,12 \n    6,15,15,15,11,15,14,11 13,13 7,7 14,12,3,15,10,12 9,6,9,6,11 13,11 7 14,10,12,3,14 13,14 7,15,11,12,6,13   \n    3,9,7,9,6,13 11,7 13 11,14 11 7,15,11,15,12,5,6,13 14,3 9,12 6,3 9,10 5,14 11 7,10,15,14,13,5,3,10,15,11,13\n    6,14,11,14,15,13 11 14,7 13 11 14,11 13 7 14,11 7,10,9,3,11,13,5,6,13,6,12 9,3 6,10,13,3,13,5,6,12,3,10,9  \n    3,13,6,13,3,13 14,7 13 14,14 13 11 7,14 11 7,14,12,6,10,9,5,5,3,15,11 13 14,14 7,10,13,6,15,11,13,5,6,10,12\n    6,15,9,3,14,9,7,13 14,7 14,15,11,11,10,12,3,15,12,3,14 13,9 3,6 12,11 7,13,7,10,11,11,15,12,5              \n    7,13,6,10,15,14,9,5,3,11,14,12,6,9,6,9,3,14,9,6,15,12 9,5,7,10,10,12,3,13,5                                \n    7,9,7,14,11,11,12,5,6,10,11,13,7,12,5,6,12,7,10,11,13 11,3 9 6 12,13 11 7,7 11,14,14,11,12,5,5             \n    5,6,13,7,12,6,13,5,3,14,14,13,3,15,11,11,11,13,6,12,7 13 14,10 5,11 7 14,9 12,3,15,14,11,11,13             \n    7,9,7,9,5,7,11,15,14,13,5,7,12,3,10,14,12,3,13 11,3 9,9 3,6 12 3 9,14 13 7,14 7,10,11,15,14,12,5           \n    7,12,3,10,11,15,14,11,9,3,9,3,15,12,6,13,3,10,13 14,6 12,12 6,7 14,11,15,14,12,3,13,5,5                    \n    3,9,6,10,12,7,9,6,14,10,12,6,13,7,15,15,12,6,9,7,15,11,12,3,13,3,12,3,9,5                                  \n    6,12,7,14,9,7,14,9,7,12,3,9,3,15,11 13,11 7,9,5,6,15,15,14,15,12,3,14,13,6,14,9                            \n    7,15,13,7,10,11,11,10,13,5,6,10,14,13,6 3,14 11,10,9,5,5,3,13,5,5,6,15,11,15,15,12                         \n    7,9,3,13,6,14,12,6,15,11,11,10,11,11,13 14,7 14,14,12,7,15,12,7,15,13,3,13,6,11,15,13                      \n    3,10,10,9,3,9,3,9,3,10,10,10,10,10,9,3,9,3,9,3,11,9,3,11,10,9,3,10,11,9                                    \n\n**input 2** \n\n    6,10,14,12,6,14,10,12,6,12,6,14,10,12,6,10,14,14,14,12,6,14,12,6,10,14,10,12,6,12                          \n    3,14,13,7,13,3,14,15,15,15,11,13,6,9,5,6,11,9,5,3,15,15,13,5,6,15,10,15,13,5                               \n    6,11,15,15,15,10,13 11,7 11,15,9,6,9,7,12,3,13,6,10,11,14,11,15,15,11,15,9,6,13,7,13                       \n    7,12,3,13,5,6,13 14,7 14,11,14,9,6,15,11,14,15,11,10,12,7,12,7,13 11,6 12,13 7,6 12,11 7,13,5,5            \n    7,11,14,9,3,9,7,13,6,15,14,13,5,6,9,3,10,10,13,3,15,13,3 6,15,15,13 11,14 7,13,5,5                         \n    7,14,13,6,14,12,5,7,15,15,9,3,9,5,6,12,6,14,9,6,15,11 13,12 6 9 3,3 9,13 7,7 14,15,13,7,9                  \n    7,15,13,5,5,3,9,5,5,5,6,14,14,9,3,11,11,13,6,15,15,14 13,11 7 14,14,15,15,15,11,11,12                      \n    7,11,9,5,7,12,6,13,3,13,3,13,3,10,10,10,14,11 7,9,5,3,11,14 13,11 7,15,11,11,10,12,5                       \n    5,6,10,9,5,5,5,7,12,5,6,9,6,12,6,14,13 11,6 12 3 9,12 6,7 13,12 6,6 12,9 3,14 7,15,10,12,6,15,13           \n    7,9,6,12,3,9,5,5,3,9,3,14,13 11,7 13 11,13 11 7,7 13 11,5 10,13 7 14,7 11,13,5,7,14,11,9,6,11,13,3,13      \n    5,6,11,9,6,12,3,13,6,14,14,13,6,10,11 14,11,11 14,13,6 3,15,11,15,9,6,12,7,10,9,6,13                       \n    3,11,10,10,9,3,10,15,9,7,15,13,5,6,14 13,12 6,14 7 13,9 3,7 13 14,11 7,14,9,6,11,13,3,12,6,11,9            \n    6,10,14,10,10,12,6,15,10,13 11,7 13,11 7,13,5,5,3,11,14,13,6 3,15,12,5,6,15,12,5,7,14,12                   \n    5,6,9,6,14,11,15,15,10,9 12,7,14 11,13,7,13,6,12,5,3,11 14,9,5,5,7,15,15,11,15,15,9                        \n    3,15,14,15,13,6,9,5,6,14 13 11,9 3,7 13 14,13 7,3 9,11 7,11,15,9,6,14 11,10,11,15,13 11,7 11,13,6,11,11,12 \n    6,15,15,15,11,15,14,13 11,7 13,7 14,12,3,15,10,12 9,6,9,6,13 11,7 11 14,10,12,3,13 14,7 14,15,11,12,6,13   \n    3,9,7,9,6,13 11,7 13 11,11 7 14,15,11,15,12,5,6,13 14,9 3,6 12,9 3,5 10,7 11 14,10,15,14,13,5,3,10,15,11,13\n    6,14,11,14,15,13 11 14,7 13 11 14,14 13 11 7,11 7,10,9,3,11,13,5,6,13,6,9 12,3 6,10,13,3,13,5,6,12,3,10,9  \n    3,13,6,13,3,13 14,7 13 14,13 11 7 14,14 7 11,14,12,6,10,9,5,5,3,15,14 13 11,14 7,10,13,6,15,11,13,5,6,10,12\n    6,15,9,3,14,9,7,13 14,7 14,15,11,11,10,12,3,15,12,3,13 14,3 9,12 6,7 11,13,7,10,11,11,15,12,5              \n    7,13,6,10,15,14,9,5,3,11,14,12,6,9,6,9,3,14,9,6,15,9 12,5,7,10,10,12,3,13,5                                \n    7,9,7,14,11,11,12,5,6,10,11,13,7,12,5,6,12,7,10,11,11 13,12 6 9 3,7 13 11,11 7,14,14,11,12,5,5             \n    5,6,13,7,12,6,13,5,3,14,14,13,3,15,11,11,11,13,6,12,14 13 7,5 10,11 7 14,12 9,3,15,14,11,11,13             \n    7,9,7,9,5,7,11,15,14,13,5,7,12,3,10,14,12,3,13 11,3 9,9 3,3 9 6 12,14 13 7,7 14,10,11,15,14,12,5           \n    7,12,3,10,11,15,14,11,9,3,9,3,15,12,6,13,3,10,13 14,6 12,12 6,14 7,11,15,14,12,3,13,5,5                    \n    3,9,6,10,12,7,9,6,14,10,12,6,13,7,15,15,12,6,9,7,15,11,12,3,13,3,12,3,9,5                                  \n    6,12,7,14,9,7,14,9,7,12,3,9,3,15,13 11,7 11,9,5,6,15,15,14,15,12,3,14,13,6,14,9                            \n    7,15,13,7,10,11,11,10,13,5,6,10,14,13,3 6,11 14,10,9,5,5,3,13,5,5,6,15,11,15,15,12                         \n    7,9,3,13,6,14,12,6,15,11,11,10,11,11,14 13,14 7,14,12,7,15,12,7,15,13,3,13,6,11,15,13                      \n    3,10,10,9,3,9,3,9,3,10,10,10,10,10,9,3,9,3,9,3,11,9,3,11,10,9,3,10,11,9          ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4u3e96", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Godspiral", "media": null, "name": "t3_4u3e96", "score": 31, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1469210984.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4u3e96/20160722_challenge_276_hard_loop_solver_part_2/", "locked": false, "stickied": false, "created": 1469231174.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4u3e96/20160722_challenge_276_hard_loop_solver_part_2/", "author_flair_text": "3 3", "quarantine": false, "title": "[2016-07-22] Challenge #276 [Hard] \u221e Loop solver part 2", "created_utc": 1469202374.0, "link_flair_text": null, "distinguished": null, "num_comments": 7, "visited": false, "num_reports": null, "ups": 31}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The key function is a higher order array function modelled in sql as &lt;code&gt;group by&lt;/code&gt; and in J as &lt;code&gt;/.&lt;/code&gt;  For each key, apply a passed function to the entire subarray of items that share the same key.&lt;/p&gt;\n\n&lt;h1&gt;function signature&lt;/h1&gt;\n\n&lt;p&gt;key(&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; elements:  an array/list of stuff. number of items is leading array dimension,\n key: an array/list of stuff.  Same amount of items as &amp;quot;elements&amp;quot;.  If null, then defaults to same array as elements,\n applyfunction:  function that will be called for each group of elements that have the same key.  Optionally, this function could also have the key parameter.  Results are aggregated in order of key appearance.\n )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;key(&lt;code&gt;3 4 5 6&lt;/code&gt; , &lt;code&gt;2 0 1 2&lt;/code&gt; , &lt;code&gt;sum&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;would produce&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;9 4 5&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;There are 2 elements with key 2, and so for key 2, sum is called with &lt;code&gt;3 6&lt;/code&gt;.  Results accumulated in order of key seen.&lt;/p&gt;\n\n&lt;h1&gt;1. Histogram&lt;/h1&gt;\n\n&lt;p&gt;for each item in input, return a record with the key and the item count for that key&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;input:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; 5 3 5 2 2 9 7 0 7 5 9 2 9 1 9 9 6 6 8 5 1 1 4 8 5 0 3 5 8 2 3 8 3 4 6 4 9 3 4 3 4 5 9 9 9 7 7 1 9 3 4 6 6 8 8 0 4 0 6 3 2 6 3 2 3 5 7 4 2 6 7 3 9 5 7 8 9 5 6 5 6 8 3 1 8 4 6 5 6 4 8 9 5 7 8 4 4 9 2 6 10\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; 5 13\n 3 12\n 2  8\n 9 14\n 7  8\n 0  4\n 1  5\n 6 13\n 8 11\n 4 12\n10  1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;2. grouped sum of field&lt;/h1&gt;\n\n&lt;p&gt;for each record use the first field as key, and return key and sum of field 2 (grouped by key)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;input:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a 14\nb 21\nc 82\nd 85\na 54\nb 96\nc 9 \nd 61\na 43\nb 49\nc 16\nd 34\na 73\nb 59\nc 36\nd 24\na 45\nb 89\nc 77\nd 68\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\u250c\u2500\u252c\u2500\u2500\u2500\u2510\n\u2502a\u2502229\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502b\u2502314\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502c\u2502220\u2502\n\u251c\u2500\u253c\u2500\u2500\u2500\u2524\n\u2502d\u2502272\u2502\n\u2514\u2500\u2534\u2500\u2500\u2500\u2518\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;3. nub (easier)&lt;/h1&gt;\n\n&lt;p&gt;the &amp;quot;nub of an array&amp;quot; can be implemented with key.  It is similar to sql first function. &lt;/p&gt;\n\n&lt;p&gt;for the input from &lt;code&gt;2.&lt;/code&gt; return the first element keyed (grouped) by first column&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;output:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  (&amp;gt;@{.&amp;quot;1 ({./.) ]) b\n\u250c\u2500\u252c\u2500\u2500\u2510\n\u2502a\u250214\u2502\n\u251c\u2500\u253c\u2500\u2500\u2524\n\u2502b\u250221\u2502\n\u251c\u2500\u253c\u2500\u2500\u2524\n\u2502c\u250282\u2502\n\u251c\u2500\u253c\u2500\u2500\u2524\n\u2502d\u250285\u2502\n\u2514\u2500\u2534\u2500\u2500\u2518\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;note&lt;/h1&gt;\n\n&lt;p&gt;I will upvote if you write a key function that functionally returns an array/list.  (spirit of challenge is not to shortcut through actual data inputs)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "The key function is a higher order array function modelled in sql as `group by` and in J as `/.`  For each key, apply a passed function to the entire subarray of items that share the same key.\n\n#function signature\n\nkey(\n\n     elements:  an array/list of stuff. number of items is leading array dimension,\n     key: an array/list of stuff.  Same amount of items as \"elements\".  If null, then defaults to same array as elements,\n     applyfunction:  function that will be called for each group of elements that have the same key.  Optionally, this function could also have the key parameter.  Results are aggregated in order of key appearance.\n     )\n\nkey(`3 4 5 6` , `2 0 1 2` , `sum`)\n\nwould produce\n\n`9 4 5`\n\nThere are 2 elements with key 2, and so for key 2, sum is called with `3 6`.  Results accumulated in order of key seen.\n\n# 1. Histogram\n\nfor each item in input, return a record with the key and the item count for that key\n\n**input:**\n\n     5 3 5 2 2 9 7 0 7 5 9 2 9 1 9 9 6 6 8 5 1 1 4 8 5 0 3 5 8 2 3 8 3 4 6 4 9 3 4 3 4 5 9 9 9 7 7 1 9 3 4 6 6 8 8 0 4 0 6 3 2 6 3 2 3 5 7 4 2 6 7 3 9 5 7 8 9 5 6 5 6 8 3 1 8 4 6 5 6 4 8 9 5 7 8 4 4 9 2 6 10\n\n**output** \n\n     5 13\n     3 12\n     2  8\n     9 14\n     7  8\n     0  4\n     1  5\n     6 13\n     8 11\n     4 12\n    10  1\n\n\n# 2. grouped sum of field\n\nfor each record use the first field as key, and return key and sum of field 2 (grouped by key)\n\n**input:**\n\n    a 14\n    b 21\n    c 82\n    d 85\n    a 54\n    b 96\n    c 9 \n    d 61\n    a 43\n    b 49\n    c 16\n    d 34\n    a 73\n    b 59\n    c 36\n    d 24\n    a 45\n    b 89\n    c 77\n    d 68\n\n**output:**\n\n    \u250c\u2500\u252c\u2500\u2500\u2500\u2510\n    \u2502a\u2502229\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2524\n    \u2502b\u2502314\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2524\n    \u2502c\u2502220\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2500\u2524\n    \u2502d\u2502272\u2502\n    \u2514\u2500\u2534\u2500\u2500\u2500\u2518\n\n\n# 3. nub (easier)\n\nthe \"nub of an array\" can be implemented with key.  It is similar to sql first function. \n\nfor the input from `2.` return the first element keyed (grouped) by first column\n\n**output:**\n\n      (&gt;@{.\"1 ({./.) ]) b\n    \u250c\u2500\u252c\u2500\u2500\u2510\n    \u2502a\u250214\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2524\n    \u2502b\u250221\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2524\n    \u2502c\u250282\u2502\n    \u251c\u2500\u253c\u2500\u2500\u2524\n    \u2502d\u250285\u2502\n    \u2514\u2500\u2534\u2500\u2500\u2518\n\n#note\n\nI will upvote if you write a key function that functionally returns an array/list.  (spirit of challenge is not to shortcut through actual data inputs)", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4tqy5c", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Godspiral", "media": null, "name": "t3_4tqy5c", "score": 44, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1469023203.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4tqy5c/20160720_challenge_276_intermediate_key_function/", "locked": false, "stickied": false, "created": 1469047402.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4tqy5c/20160720_challenge_276_intermediate_key_function/", "author_flair_text": "3 3", "quarantine": false, "title": "[2016-07-20] Challenge #276 [Intermediate] Key function", "created_utc": 1469018602.0, "link_flair_text": null, "distinguished": null, "num_comments": 69, "visited": false, "num_reports": null, "ups": 44}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;There is a crisis unfolding in Reddit. For many years, Redditors have continued to evolve sh*tposting to new highs, but it seems progress has slowed in recent times. Your mission, should you choose to accept it, is to create a state of the art rektangular sh*tpost generator and bring sh*tposting into the 21st century.&lt;/p&gt;\n\n&lt;p&gt;Given a word, a width and a length, you must print a rektangle with the word of the given dimensions.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;The input is a string &lt;code&gt;word&lt;/code&gt;, a &lt;code&gt;width&lt;/code&gt; and a &lt;code&gt;height&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;Quality rektangles. See examples. Any orientation of the rektangle is acceptable&lt;/p&gt;\n\n&lt;h2&gt;Examples&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Input&lt;/em&gt;: &amp;quot;REKT&amp;quot;, width=1, height=1&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;R E K T\nE     K\nK     E\nT K E R\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;em&gt;Input&lt;/em&gt;: &amp;quot;REKT&amp;quot;, width=2, height=2&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Output&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;T K E R E K T\nK     E     K          \nE     K     E\nR E K T K E R\nE     K     E\nK     E     K\nT K E R E K T\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Notes/Hints&lt;/h1&gt;\n\n&lt;p&gt;None&lt;/p&gt;\n\n&lt;h1&gt;Bonus&lt;/h1&gt;\n\n&lt;p&gt;Many fun bonuses possible - the more ways you can squeeze REKT into different shapes, the better.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Print rektangles rotated by 45 degrees.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Print words in other shapes (? surprise me)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Creatively colored output? Rainbow rektangles would be glorious.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Credit&lt;/h1&gt;\n\n&lt;p&gt;This challenge was submitted by &lt;a href=\"/u/stonerbobo\"&gt;/u/stonerbobo&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;Have a good challenge idea?&lt;/p&gt;\n\n&lt;p&gt;Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;. Thank you!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\nThere is a crisis unfolding in Reddit. For many years, Redditors have continued to evolve sh\\*tposting to new highs, but it seems progress has slowed in recent times. Your mission, should you choose to accept it, is to create a state of the art rektangular sh\\*tpost generator and bring sh\\*tposting into the 21st century.\n\nGiven a word, a width and a length, you must print a rektangle with the word of the given dimensions.\n\n#Formal Inputs &amp;amp; Outputs\n\n##Input description\n\nThe input is a string `word`, a `width` and a `height`\n\n##Output description\n\nQuality rektangles. See examples. Any orientation of the rektangle is acceptable\n\n##Examples\n\n*  *Input*: \"REKT\", width=1, height=1\n\n    *Output*: \n\n        R E K T\n        E     K\n        K     E\n        T K E R\n\n* *Input*: \"REKT\", width=2, height=2\n   \n    *Output*:\n      \n        T K E R E K T\n        K     E     K          \n        E     K     E\n        R E K T K E R\n        E     K     E\n        K     E     K\n        T K E R E K T\n\n#Notes/Hints\n\nNone\n\n#Bonus\n\nMany fun bonuses possible - the more ways you can squeeze REKT into different shapes, the better.\n\n* Print rektangles rotated by 45 degrees.\n\n* Print words in other shapes (? surprise me)\n\n* Creatively colored output? Rainbow rektangles would be glorious.\n\n# Credit\n\nThis challenge was submitted by /u/stonerbobo\n\n#Finally\n\nHave a good challenge idea?\n\nConsider submitting it to /r/dailyprogrammer_ideas. Thank you!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4tetif", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_4tetif", "score": 125, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1468864971.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4tetif/20160718_challenge_276_easy_recktangles/", "locked": false, "stickied": false, "created": 1468871719.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4tetif/20160718_challenge_276_easy_recktangles/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-07-18] Challenge #276 [Easy] Recktangles", "created_utc": 1468842919.0, "link_flair_text": null, "distinguished": null, "num_comments": 131, "visited": false, "num_reports": null, "ups": 125}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Background&lt;/h1&gt;\n\n&lt;p&gt;The Splurth Council for Atoms and Atom-Related Paraphernalia has erupted into bickering, with everyone having an opinion on how to build the periodic table. Abcder the Wise demands alphabetical ordering, Zyxwur the Comely wants reverse-alphabetical, and Gsvpnnhq the Random really wants to pick the names. Can you make everyone happy?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/4so25w/20160713_challenge_275_intermediate_splurthian/\"&gt;See Wednesday&amp;#39;s Intermediate challenge for the preference procedure of element symbols in Splurthian Chemistry.&lt;/a&gt; You can ignore capital letters for the purpose of this challenge.&lt;/p&gt;\n\n&lt;h1&gt;Requirements&lt;/h1&gt;\n\n&lt;p&gt;Today&amp;#39;s Hard challenge is an optimization problem. &lt;a href=\"http://pastebin.com/raw/uQKZWbR4\"&gt;Here is a list of 10,000 random 8-character strings.&lt;/a&gt; These are candidate element names. You must select some subset of (up to 676) distinct items from this list. The requirements are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Every item on your submitted list &lt;em&gt;must&lt;/em&gt; appear in the candidate list.&lt;/li&gt;\n&lt;li&gt;The items on your submitted list &lt;em&gt;must&lt;/em&gt; be in alphabetical order.&lt;/li&gt;\n&lt;li&gt;Your submitted list &lt;em&gt;must&lt;/em&gt; be able to be assigned symbols, in order, using the preference procedure in Wednesday&amp;#39;s Intermediate challenge (i.e. each element is assigned its most preferred symbol that&amp;#39;s still available).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Post a link to your list on pastebin or github or Google docs or somewhere. Also post the code you used to generate your list, along with your score.&lt;/p&gt;\n\n&lt;h1&gt;Scoring&lt;/h1&gt;\n\n&lt;p&gt;Your score is as follows: assign each element a symbol using the process in Wednesday&amp;#39;s challenge. Reverse the list of symbols you get. Your score is the number of symbols &lt;em&gt;at the beginning of the reversed list&lt;/em&gt; that are in alphabetical order.&lt;/p&gt;\n\n&lt;h1&gt;Example scoring&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"http://pastebin.com/raw/XX7d3dx3\"&gt;Here is a valid submission list&lt;/a&gt; that I generated. The first and last few entries are:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;aabmevmt\nabhhwzpo\naehwwogz\nafbvhlke\nafycbvxv\nagfigxja\nagxdnjyc\n....\nxoyittxg\nxrlkgqbe\nxxutzias\nycykczyb\nygnoizht\nyivqpvmj\nyjhamdhh\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Assigning each of these a symbol, using the preference procedure, we get:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;aabmevmt aa\nabhhwzpo ab\naehwwogz ae\nafbvhlke af\nafycbvxv ay\nagfigxja ag\nagxdnjyc ax\n....\nxoyittxg yi\nxrlkgqbe lb\nxxutzias zi\nycykczyb yy\nygnoizht yn\nyivqpvmj ym\nyjhamdhh jm\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, reverse the list of symbols. This starts:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;jm ym yn yy zi lb yi ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The first 5 symbols on this reversed list (&lt;code&gt;jm&lt;/code&gt;, &lt;code&gt;ym&lt;/code&gt;, &lt;code&gt;yn&lt;/code&gt;, &lt;code&gt;yy&lt;/code&gt;, and &lt;code&gt;zi&lt;/code&gt;) are in alphabetical order. However, the sixth symbol (&lt;code&gt;lb&lt;/code&gt;) comes before the fifth symbol in alphabetical order. Thus my score is 5. How high can you get?&lt;/p&gt;\n\n&lt;h1&gt;Verification script&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"http://pastebin.com/yX9hs0We\"&gt;Here is a Python script you can use&lt;/a&gt; to make sure your submission is valid and to compute your score.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Background\n\nThe Splurth Council for Atoms and Atom-Related Paraphernalia has erupted into bickering, with everyone having an opinion on how to build the periodic table. Abcder the Wise demands alphabetical ordering, Zyxwur the Comely wants reverse-alphabetical, and Gsvpnnhq the Random really wants to pick the names. Can you make everyone happy?\n\n[See Wednesday's Intermediate challenge for the preference procedure of element symbols in Splurthian Chemistry.](https://www.reddit.com/r/dailyprogrammer/comments/4so25w/20160713_challenge_275_intermediate_splurthian/) You can ignore capital letters for the purpose of this challenge.\n\n# Requirements\n\nToday's Hard challenge is an optimization problem. [Here is a list of 10,000 random 8-character strings.](http://pastebin.com/raw/uQKZWbR4) These are candidate element names. You must select some subset of (up to 676) distinct items from this list. The requirements are:\n\n* Every item on your submitted list *must* appear in the candidate list.\n* The items on your submitted list *must* be in alphabetical order.\n* Your submitted list *must* be able to be assigned symbols, in order, using the preference procedure in Wednesday's Intermediate challenge (i.e. each element is assigned its most preferred symbol that's still available).\n\nPost a link to your list on pastebin or github or Google docs or somewhere. Also post the code you used to generate your list, along with your score.\n\n# Scoring\n\nYour score is as follows: assign each element a symbol using the process in Wednesday's challenge. Reverse the list of symbols you get. Your score is the number of symbols *at the beginning of the reversed list* that are in alphabetical order.\n\n# Example scoring\n\n[Here is a valid submission list](http://pastebin.com/raw/XX7d3dx3) that I generated. The first and last few entries are:\n\n    aabmevmt\n    abhhwzpo\n    aehwwogz\n    afbvhlke\n    afycbvxv\n    agfigxja\n    agxdnjyc\n    ....\n    xoyittxg\n    xrlkgqbe\n    xxutzias\n    ycykczyb\n    ygnoizht\n    yivqpvmj\n    yjhamdhh\n\nAssigning each of these a symbol, using the preference procedure, we get:\n\n    aabmevmt aa\n    abhhwzpo ab\n    aehwwogz ae\n    afbvhlke af\n    afycbvxv ay\n    agfigxja ag\n    agxdnjyc ax\n    ....\n    xoyittxg yi\n    xrlkgqbe lb\n    xxutzias zi\n    ycykczyb yy\n    ygnoizht yn\n    yivqpvmj ym\n    yjhamdhh jm\n\nNow, reverse the list of symbols. This starts:\n\n    jm ym yn yy zi lb yi ...\n\nThe first 5 symbols on this reversed list (`jm`, `ym`, `yn`, `yy`, and `zi`) are in alphabetical order. However, the sixth symbol (`lb`) comes before the fifth symbol in alphabetical order. Thus my score is 5. How high can you get?\n\n# Verification script\n\n[Here is a Python script you can use](http://pastebin.com/yX9hs0We) to make sure your submission is valid and to compute your score.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4t11c3", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Cosmologicon", "media": null, "name": "t3_4t11c3", "score": 38, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4t11c3/20160715_challenge_275_hard_splurthian_chemistry/", "locked": false, "stickied": false, "created": 1468641671.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4t11c3/20160715_challenge_275_hard_splurthian_chemistry/", "author_flair_text": "2 3", "quarantine": false, "title": "[2016-07-15] Challenge #275 [Hard] Splurthian Chemistry 103", "created_utc": 1468612871.0, "link_flair_text": null, "distinguished": null, "num_comments": 16, "visited": false, "num_reports": null, "ups": 38}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/4savyr/20160711_challenge_275_easy_splurthian_chemistry/\"&gt;See Monday&amp;#39;s Easy challenge for the rules of element symbols in Splurthian Chemistry.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The Splurth Council of Atoms and Atom-Related Paraphernalia has decided to keep their current naming conventions, as listed in the Easy challenge, but to add a preference system. So while there are still 6 valid symbols for the element Iron, the preferred symbol is &lt;code&gt;Ir&lt;/code&gt;. The second-most preferred symbol is &lt;code&gt;Io&lt;/code&gt;, then &lt;code&gt;In&lt;/code&gt;, &lt;code&gt;Ro&lt;/code&gt;, &lt;code&gt;Rn&lt;/code&gt;, and finally &lt;code&gt;On&lt;/code&gt;. A symbol is preferred based on how early in the element name its first letter is, followed by how early its second letter is.&lt;/p&gt;\n\n&lt;p&gt;In the case of repeated letters like in &lt;code&gt;Neon&lt;/code&gt;, &lt;code&gt;Eo&lt;/code&gt; is preferred to &lt;code&gt;En&lt;/code&gt;, even though an &lt;code&gt;n&lt;/code&gt; is closer to the beginning of &lt;code&gt;Neon&lt;/code&gt; than the &lt;code&gt;o&lt;/code&gt; is. This is because it&amp;#39;s the second &lt;code&gt;n&lt;/code&gt; that&amp;#39;s used in the symbol &lt;code&gt;En&lt;/code&gt;, since the second letter in the symbol must appear after the first.&lt;/p&gt;\n\n&lt;p&gt;When the Council receives a new element to add to the table, it chooses the most preferred valid symbol for that element that&amp;#39;s not already taken by another element. For instance, if Chlorine were the first element added, then it would get the symbol &lt;code&gt;Ch&lt;/code&gt;. If Chromium was added later, it would get the symbol &lt;code&gt;Cr&lt;/code&gt;. If Cesium and Cerium were then added, they would get the symbols &lt;code&gt;Ce&lt;/code&gt; and &lt;code&gt;Ci&lt;/code&gt;. If there are no valid symbols for the new element.... well, that&amp;#39;s why the Council needs you.&lt;/p&gt;\n\n&lt;h1&gt;Details and examples&lt;/h1&gt;\n\n&lt;p&gt;The Council has decided to wipe the table clean and start afresh. The list of &lt;a href=\"http://pastebin.com/raw/uVyHtMRb\"&gt;all 366 elements known to Splurthians&lt;/a&gt; are set to be assigned a symbol, one by one, in the order in that text file, following the preference rules above.&lt;/p&gt;\n\n&lt;p&gt;Determine the symbol assigned to each element in the list. For instance, you should find that Protactinium is assigned &lt;code&gt;Pt&lt;/code&gt;, Californium is assigned &lt;code&gt;Cf&lt;/code&gt;, and Lionium is assigned &lt;code&gt;Iu&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Find the first element that will not be able to have a symbol assigned, because when you get to it all the valid symbols for it are taken. (You can stop assigning symbols at this point if you like.) Post this element along with your solution, as a check.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus challenge&lt;/h1&gt;\n\n&lt;p&gt;Find a way to reorder the elements so that it&amp;#39;s possible to get through the entire list, using the preference rules above. Post a link to your reordered list. There are many possible answers.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\n[See Monday's Easy challenge for the rules of element symbols in Splurthian Chemistry.](https://www.reddit.com/r/dailyprogrammer/comments/4savyr/20160711_challenge_275_easy_splurthian_chemistry/)\n\nThe Splurth Council of Atoms and Atom-Related Paraphernalia has decided to keep their current naming conventions, as listed in the Easy challenge, but to add a preference system. So while there are still 6 valid symbols for the element Iron, the preferred symbol is `Ir`. The second-most preferred symbol is `Io`, then `In`, `Ro`, `Rn`, and finally `On`. A symbol is preferred based on how early in the element name its first letter is, followed by how early its second letter is.\n\nIn the case of repeated letters like in `Neon`, `Eo` is preferred to `En`, even though an `n` is closer to the beginning of `Neon` than the `o` is. This is because it's the second `n` that's used in the symbol `En`, since the second letter in the symbol must appear after the first.\n\nWhen the Council receives a new element to add to the table, it chooses the most preferred valid symbol for that element that's not already taken by another element. For instance, if Chlorine were the first element added, then it would get the symbol `Ch`. If Chromium was added later, it would get the symbol `Cr`. If Cesium and Cerium were then added, they would get the symbols `Ce` and `Ci`. If there are no valid symbols for the new element.... well, that's why the Council needs you.\n\n# Details and examples\n\nThe Council has decided to wipe the table clean and start afresh. The list of [all 366 elements known to Splurthians](http://pastebin.com/raw/uVyHtMRb) are set to be assigned a symbol, one by one, in the order in that text file, following the preference rules above.\n\nDetermine the symbol assigned to each element in the list. For instance, you should find that Protactinium is assigned `Pt`, Californium is assigned `Cf`, and Lionium is assigned `Iu`.\n\nFind the first element that will not be able to have a symbol assigned, because when you get to it all the valid symbols for it are taken. (You can stop assigning symbols at this point if you like.) Post this element along with your solution, as a check.\n\n# Optional bonus challenge\n\nFind a way to reorder the elements so that it's possible to get through the entire list, using the preference rules above. Post a link to your reordered list. There are many possible answers.", "likes": null, "suggested_sort": "new", "user_reports": [], "secure_media": null, "saved": false, "id": "4so25w", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Cosmologicon", "media": null, "name": "t3_4so25w", "score": 49, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1468433691.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4so25w/20160713_challenge_275_intermediate_splurthian/", "locked": false, "stickied": false, "created": 1468456375.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4so25w/20160713_challenge_275_intermediate_splurthian/", "author_flair_text": "2 3", "quarantine": false, "title": "[2016-07-13] Challenge #275 [Intermediate] Splurthian Chemistry 102", "created_utc": 1468427575.0, "link_flair_text": null, "distinguished": null, "num_comments": 72, "visited": false, "num_reports": null, "ups": 49}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;The inhabitants of the planet Splurth are building their own &lt;a href=\"https://en.wikipedia.org/wiki/Periodic_table#Overview\"&gt;periodic table of the elements&lt;/a&gt;. Just like Earth&amp;#39;s periodic table has a chemical symbol for each element (&lt;code&gt;H&lt;/code&gt; for Hydrogen, &lt;code&gt;Li&lt;/code&gt; for Lithium, etc.), so does Splurth&amp;#39;s. However, their chemical symbols must follow certain rules:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;All chemical symbols must be exactly two letters, so &lt;code&gt;B&lt;/code&gt; is not a valid symbol for Boron.&lt;/li&gt;\n&lt;li&gt;Both letters in the symbol must appear in the element name, but the first letter of the element name does not necessarily need to appear in the symbol. So &lt;code&gt;Hg&lt;/code&gt; is not valid for Mercury, but &lt;code&gt;Cy&lt;/code&gt; is.&lt;/li&gt;\n&lt;li&gt;The two letters must appear in order in the element name. So &lt;code&gt;Vr&lt;/code&gt; is valid for Silver, but &lt;code&gt;Rv&lt;/code&gt; is not. To be clear, both &lt;code&gt;Ma&lt;/code&gt; and &lt;code&gt;Am&lt;/code&gt; are valid for Magnesium, because there is both an &lt;code&gt;a&lt;/code&gt; that appears after an &lt;code&gt;m&lt;/code&gt;, and an &lt;code&gt;m&lt;/code&gt; that appears after an &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;If the two letters in the symbol are the same, it must appear twice in the element name. So &lt;code&gt;Nn&lt;/code&gt; is valid for Xenon, but &lt;code&gt;Xx&lt;/code&gt; and &lt;code&gt;Oo&lt;/code&gt; are not.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;As a member of the Splurth Council of Atoms and Atom-Related Paraphernalia, you must determine whether a proposed chemical symbol fits these rules.&lt;/p&gt;\n\n&lt;h1&gt;Details&lt;/h1&gt;\n\n&lt;p&gt;Write a function that, given two strings, one an element name and one a proposed symbol for that element, determines whether the symbol follows the rules. If you like, you may parse the program&amp;#39;s input and output the result, but this is not necessary.&lt;/p&gt;\n\n&lt;p&gt;The symbol will have exactly two letters. Both element name and symbol will contain only the letters a-z. Both the element name and the symbol will have their first letter capitalized, with the rest lowercase. (If you find that too challenging, it&amp;#39;s okay to instead assume that both will be completely lowercase.)&lt;/p&gt;\n\n&lt;h1&gt;Examples&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;Spenglerium, Ee -&amp;gt; true\nZeddemorium, Zr -&amp;gt; true\nVenkmine, Kn -&amp;gt; true\nStantzon, Zt -&amp;gt; false\nMelintzum, Nn -&amp;gt; false\nTullium, Ty -&amp;gt; false\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional bonus challenges&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Given an element name, find the valid symbol for that name that&amp;#39;s first in alphabetical order. E.g. &lt;code&gt;Gozerium -&amp;gt; Ei&lt;/code&gt;, &lt;code&gt;Slimyrine -&amp;gt; Ie&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Given an element name, find the number of distinct valid symbols for that name. E.g. &lt;code&gt;Zuulon -&amp;gt; 11&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The planet Blurth has similar symbol rules to Splurth, but symbols can be any length, from 1 character to the entire length of the element name. Valid Blurthian symbols for &lt;code&gt;Zuulon&lt;/code&gt; include &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;Uuo&lt;/code&gt;, and &lt;code&gt;Zuuln&lt;/code&gt;. Complete challenge #2 for the rules of Blurth. E.g. &lt;code&gt;Zuulon -&amp;gt; 47&lt;/code&gt;.&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "# Description\n\nThe inhabitants of the planet Splurth are building their own [periodic table of the elements](https://en.wikipedia.org/wiki/Periodic_table#Overview). Just like Earth's periodic table has a chemical symbol for each element (`H` for Hydrogen, `Li` for Lithium, etc.), so does Splurth's. However, their chemical symbols must follow certain rules:\n\n1. All chemical symbols must be exactly two letters, so `B` is not a valid symbol for Boron.\n2. Both letters in the symbol must appear in the element name, but the first letter of the element name does not necessarily need to appear in the symbol. So `Hg` is not valid for Mercury, but `Cy` is.\n3. The two letters must appear in order in the element name. So `Vr` is valid for Silver, but `Rv` is not. To be clear, both `Ma` and `Am` are valid for Magnesium, because there is both an `a` that appears after an `m`, and an `m` that appears after an `a`.\n4. If the two letters in the symbol are the same, it must appear twice in the element name. So `Nn` is valid for Xenon, but `Xx` and `Oo` are not.\n\nAs a member of the Splurth Council of Atoms and Atom-Related Paraphernalia, you must determine whether a proposed chemical symbol fits these rules.\n\n# Details\n\nWrite a function that, given two strings, one an element name and one a proposed symbol for that element, determines whether the symbol follows the rules. If you like, you may parse the program's input and output the result, but this is not necessary.\n\nThe symbol will have exactly two letters. Both element name and symbol will contain only the letters a-z. Both the element name and the symbol will have their first letter capitalized, with the rest lowercase. (If you find that too challenging, it's okay to instead assume that both will be completely lowercase.)\n\n# Examples\n\n    Spenglerium, Ee -&gt; true\n    Zeddemorium, Zr -&gt; true\n    Venkmine, Kn -&gt; true\n    Stantzon, Zt -&gt; false\n    Melintzum, Nn -&gt; false\n    Tullium, Ty -&gt; false\n\n# Optional bonus challenges\n\n1. Given an element name, find the valid symbol for that name that's first in alphabetical order. E.g. `Gozerium -&gt; Ei`, `Slimyrine -&gt; Ie`.\n2. Given an element name, find the number of distinct valid symbols for that name. E.g. `Zuulon -&gt; 11`.\n3. The planet Blurth has similar symbol rules to Splurth, but symbols can be any length, from 1 character to the entire length of the element name. Valid Blurthian symbols for `Zuulon` include `N`, `Uuo`, and `Zuuln`. Complete challenge #2 for the rules of Blurth. E.g. `Zuulon -&gt; 47`.", "likes": null, "suggested_sort": "new", "user_reports": [], "secure_media": null, "saved": false, "id": "4savyr", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "Cosmologicon", "media": null, "name": "t3_4savyr", "score": 88, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": 1468247598.0, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4savyr/20160711_challenge_275_easy_splurthian_chemistry/", "locked": false, "stickied": false, "created": 1468272211.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4savyr/20160711_challenge_275_easy_splurthian_chemistry/", "author_flair_text": "2 3", "quarantine": false, "title": "[2016-07-11] Challenge #275 [Easy] Splurthian Chemistry 101", "created_utc": 1468243411.0, "link_flair_text": null, "distinguished": null, "num_comments": 215, "visited": false, "num_reports": null, "ups": 88}}, {"kind": "t3", "data": {"contest_mode": false, "banned_by": null, "domain": "self.dailyprogrammer", "subreddit": "dailyprogrammer", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;\u221e Loop is a mobile game that consists of n*m tiles, placed in a n*m grid. There are 16 different tiles:&lt;/p&gt;\n\n&lt;p&gt;\u2503, \u2501, \u250f, \u2513, \u251b, \u2517, \u2523, \u2533, \u252b, \u253b, \u254b, \u2579, \u257a, \u257b, \u2578, and the empty tile.&lt;/p&gt;\n\n&lt;p&gt;(If some of the Unicode characters aren&amp;#39;t shown, &lt;a href=\"http://i.imgur.com/PWyeW5r.png\"&gt;here&lt;/a&gt; is a screenshot of this paragraph).&lt;/p&gt;\n\n&lt;p&gt;In other words, every tile may or may not have a &amp;quot;pipe&amp;quot; going up, a &amp;quot;pipe&amp;quot; going right, a &amp;quot;pipe&amp;quot; going down, and a &amp;quot;pipe&amp;quot; going left. All combinations of those are valid, legal tiles.&lt;/p&gt;\n\n&lt;p&gt;At the beginning of the game, the grid is filled with those tiles. The player may then choose some tile and rotate it 90 degrees to the right. The player may do this an unlimited amount of times. For example, \u2523 becomes \u2533 and \u251b becomes \u2517, but \u254b stays \u254b.&lt;/p&gt;\n\n&lt;p&gt;The objective is to create a closed loop: every pipe must have another tile facing it in the adjacent tile \u2014 for example if some tile has a pipe going right, its adjacent tile to the right must have a pipe going left. &lt;/p&gt;\n\n&lt;p&gt;In case you need clarification, &lt;a href=\"https://www.youtube.com/watch?v=TlR1hfiIk10\"&gt;here&amp;#39;s&lt;/a&gt; some random guy playing it.&lt;/p&gt;\n\n&lt;p&gt;Your task is to write a program that, given an initial grid of tiles, outputs a solution to that grid.&lt;/p&gt;\n\n&lt;h1&gt;Formal Inputs &amp;amp; Outputs&lt;/h1&gt;\n\n&lt;p&gt;An easy way to represent tiles without having to deal with Unicode (or ASCII art) is to use the bitmask technique to encode the tiles as numbers 0...15. &lt;/p&gt;\n\n&lt;p&gt;To encode a tile:  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Start with 0.  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the tile has a pipe going up, add 1.  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the tile has a pipe going right, add 2.  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the tile has a pipe going down, add 4.  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If the tile has a pipe going left, add 8.  &lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For example, \u252b becomes 1+4+8=13.&lt;/p&gt;\n\n&lt;p&gt;If we look at the binary representation of that number, we see that:  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The first digit from the right shows whether the tile has a pipe going up;  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The second digit from the right shows whether the tile has a pipe going right;   &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The third digit from the right shows whether the tile has a pipe going down;  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The fourth digit from the right shows whether the tile has a pipe going left.  &lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;13 in binary is 1101, from which it is evident that all pipes are present except the pipe going right.&lt;/p&gt;\n\n&lt;h2&gt;Input description&lt;/h2&gt;\n\n&lt;p&gt;The input consists of n rows, each row having m space-separated numbers in it. Those numbers are the tiles, encoded in the bitmask technique discussed above.&lt;/p&gt;\n\n&lt;p&gt;You may also include the number of rows and columns in the input, if that makes it easier to read the input.&lt;/p&gt;\n\n&lt;h2&gt;Output description&lt;/h2&gt;\n\n&lt;p&gt;Output a similar grid which is obtained by rotating some or all tiles in the input grid. A tile may be rotated multiple times. The output grid must be a closed loop.&lt;/p&gt;\n\n&lt;h2&gt;Sample input 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;9 12 12 6\n10 13 13 5\n3 3 9 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample output 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;6 12 6 12\n5 7 13 5\n3 9 3 9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The sample input corresponds to:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\u251b\u2513\u2513\u250f\n\u2501\u252b\u252b\u2503\n\u2517\u2517\u251b\u2517\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By rotating some tiles, we get:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\u250f\u2513\u250f\u2513\n\u2503\u2523\u252b\u2503\n\u2517\u251b\u2517\u251b,\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which corresponds to the sample output and is a closed loop.&lt;/p&gt;\n\n&lt;p&gt;(Again, if Unicode characters don&amp;#39;t load, &lt;a href=\"http://i.imgur.com/lqCGY3e.png\"&gt;here&lt;/a&gt; is the first sample input).&lt;/p&gt;\n\n&lt;h2&gt;Sample input 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;0 8 8 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Sample output 2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;0 2 8 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The input corresponds to \u2578\u2578, surrounded by two empty tiles.&lt;br/&gt;\nThe corresponding output is \u257a\u2578.&lt;/p&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;It is easiest to use the bitwise and/or/xor operators to rotate and check for pipes. Most programming languages have such operators. The bitwise shift operators may also be helpful to rotate the tiles. &lt;a href=\"https://en.wikipedia.org/wiki/Mask_(computing)\"&gt;Here&amp;#39;s&lt;/a&gt; a Wikipedia article on using them on bitmasks.&lt;/p&gt;\n\n&lt;h1&gt;Finally&lt;/h1&gt;\n\n&lt;p&gt;This challenge was suggested by &lt;a href=\"/u/A858DE57B86C2F16F\"&gt;/u/A858DE57B86C2F16F&lt;/a&gt;, many thanks! Have a good challenge idea?   Consider submitting it to &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;/r/dailyprogrammer_ideas&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "#Description\n\n\u221e Loop is a mobile game that consists of n\\*m tiles, placed in a n\\*m grid. There are 16 different tiles:\n\n\u2503, \u2501, \u250f, \u2513, \u251b, \u2517, \u2523, \u2533, \u252b, \u253b, \u254b, \u2579, \u257a, \u257b, \u2578, and the empty tile.\n\n(If some of the Unicode characters aren't shown, [here](http://i.imgur.com/PWyeW5r.png) is a screenshot of this paragraph).\n\nIn other words, every tile may or may not have a \"pipe\" going up, a \"pipe\" going right, a \"pipe\" going down, and a \"pipe\" going left. All combinations of those are valid, legal tiles.\n\nAt the beginning of the game, the grid is filled with those tiles. The player may then choose some tile and rotate it 90 degrees to the right. The player may do this an unlimited amount of times. For example, \u2523 becomes \u2533 and \u251b becomes \u2517, but \u254b stays \u254b.\n\nThe objective is to create a closed loop: every pipe must have another tile facing it in the adjacent tile \u2014 for example if some tile has a pipe going right, its adjacent tile to the right must have a pipe going left. \n\nIn case you need clarification, [here's](https://www.youtube.com/watch?v=TlR1hfiIk10) some random guy playing it.\n\nYour task is to write a program that, given an initial grid of tiles, outputs a solution to that grid.\n\n#Formal Inputs &amp;amp; Outputs\n\nAn easy way to represent tiles without having to deal with Unicode (or ASCII art) is to use the bitmask technique to encode the tiles as numbers 0...15. \n\nTo encode a tile:  \n\n* Start with 0.  \n\n* If the tile has a pipe going up, add 1.  \n\n* If the tile has a pipe going right, add 2.  \n\n* If the tile has a pipe going down, add 4.  \n\n* If the tile has a pipe going left, add 8.  \n\nFor example, \u252b becomes 1+4+8=13.\n\nIf we look at the binary representation of that number, we see that:  \n\n* The first digit from the right shows whether the tile has a pipe going up;  \n\n* The second digit from the right shows whether the tile has a pipe going right;   \n\n* The third digit from the right shows whether the tile has a pipe going down;  \n\n* The fourth digit from the right shows whether the tile has a pipe going left.  \n\n13 in binary is 1101, from which it is evident that all pipes are present except the pipe going right.\n\n##Input description\n\nThe input consists of n rows, each row having m space-separated numbers in it. Those numbers are the tiles, encoded in the bitmask technique discussed above.\n\nYou may also include the number of rows and columns in the input, if that makes it easier to read the input.\n\n##Output description\n\nOutput a similar grid which is obtained by rotating some or all tiles in the input grid. A tile may be rotated multiple times. The output grid must be a closed loop.\n\n##Sample input 1\n\n    9 12 12 6\n    10 13 13 5\n    3 3 9 3\n\n##Sample output 1\n\n    6 12 6 12\n    5 7 13 5\n    3 9 3 9\n\nThe sample input corresponds to:\n\n    \u251b\u2513\u2513\u250f\n    \u2501\u252b\u252b\u2503\n    \u2517\u2517\u251b\u2517\n\nBy rotating some tiles, we get:\n\n    \u250f\u2513\u250f\u2513\n    \u2503\u2523\u252b\u2503\n    \u2517\u251b\u2517\u251b,\n\nwhich corresponds to the sample output and is a closed loop.\n\n(Again, if Unicode characters don't load, [here](http://i.imgur.com/lqCGY3e.png) is the first sample input).\n\n##Sample input 2\n\n    0 8 8 0\n\n##Sample output 2\n\n    0 2 8 0\n\nThe input corresponds to \u2578\u2578, surrounded by two empty tiles.  \nThe corresponding output is \u257a\u2578.\n\n#Notes\n\nIt is easiest to use the bitwise and/or/xor operators to rotate and check for pipes. Most programming languages have such operators. The bitwise shift operators may also be helpful to rotate the tiles. [Here's](https://en.wikipedia.org/wiki/Mask_(computing\\)) a Wikipedia article on using them on bitmasks.\n\n#Finally\n\nThis challenge was suggested by /u/A858DE57B86C2F16F, many thanks! Have a good challenge idea?   Consider submitting it to /r/dailyprogrammer_ideas", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "saved": false, "id": "4rug59", "gilded": 0, "secure_media_embed": {}, "clicked": false, "report_reasons": null, "author": "jnazario", "media": null, "name": "t3_4rug59", "score": 70, "approved_by": null, "over_18": false, "removal_reason": null, "hidden": false, "thumbnail": "", "subreddit_id": "t5_2tj45", "edited": false, "link_flair_css_class": null, "author_flair_css_class": "DefaultFlair", "downs": 0, "mod_reports": [], "archived": false, "media_embed": {}, "is_self": true, "hide_score": false, "permalink": "/r/dailyprogrammer/comments/4rug59/20160708_challenge_274_hard_loop_solver/", "locked": false, "stickied": false, "created": 1468010234.0, "url": "https://www.reddit.com/r/dailyprogrammer/comments/4rug59/20160708_challenge_274_hard_loop_solver/", "author_flair_text": "2 0", "quarantine": false, "title": "[2016-07-08] Challenge #274 [Hard] \u221e Loop solver", "created_utc": 1467981434.0, "link_flair_text": null, "distinguished": null, "num_comments": 50, "visited": false, "num_reports": null, "ups": 70}}], "after": "t3_4rug59", "before": null}}
